// Code generated by go-bindata. DO NOT EDIT.
// sources:
// template/base_models_go.tmpl
// template/base_resolvers_go.tmpl
// template/base_sdl.tmpl
// template/node_models_go.tmpl
// template/node_resolvers_go.tmpl
// template/node_sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateBase_models_goTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\x4d\x0a\x02\x31\x10\x44\xe1\xb5\x7d\x8a\x5a\xcc\x42\xc1\xf1\x00\x82\x07\xf0\x18\x8d\xd3\x0c\xc1\xfc\x99\xc4\x55\x5b\x77\x17\xe3\xf6\xf1\xf1\xaa\x3e\x9e\xba\x1b\x52\xd9\x2c\x8a\x84\x54\x4b\x1b\x38\x8a\xfb\x8a\xa6\x79\x37\x2c\x21\xd5\x33\x16\x8d\x41\x3b\xae\x37\x5c\xee\xd3\x74\x52\x0e\xee\xff\x4e\xc2\xfd\x07\xf1\xc1\xeb\x5d\x86\x91\xf3\x60\x79\xc3\x4a\xca\x49\xbe\x01\x00\x00\xff\xff\x19\x7a\x60\x66\x68\x00\x00\x00")

func templateBase_models_goTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBase_models_goTmpl,
		"template/base_models_go.tmpl",
	)
}

func templateBase_models_goTmpl() (*asset, error) {
	bytes, err := templateBase_models_goTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/base_models_go.tmpl", size: 104, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateBase_resolvers_goTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\xc1\x09\x02\x31\x10\x85\xe1\xb3\x53\xc5\x3b\xec\x41\xc1\xb5\x00\xc1\x02\x2c\x63\xd0\x21\x06\xdd\xcd\x98\xc4\xd3\xf8\x7a\x17\xb3\xd7\x9f\x8f\xdf\xf5\xf6\xd4\x64\x48\x55\xfd\x21\x92\x17\x2f\xb5\x63\x2f\x11\x33\xaa\xae\xc9\x30\xe5\xc5\x8f\x98\xf4\x95\xb5\xe1\x7c\xc1\xe9\x3a\x4c\x23\x65\x17\xb1\x75\x12\x11\x7f\x88\x2f\xde\x9f\xd2\x8d\x1c\x07\x5b\xef\x98\x49\x39\x88\xfc\x02\x00\x00\xff\xff\xd8\x63\xe0\x02\x69\x00\x00\x00")

func templateBase_resolvers_goTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBase_resolvers_goTmpl,
		"template/base_resolvers_go.tmpl",
	)
}

func templateBase_resolvers_goTmpl() (*asset, error) {
	bytes, err := templateBase_resolvers_goTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/base_resolvers_go.tmpl", size: 105, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateBase_sdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xc1\x6e\xe3\x2a\x14\xdd\xf3\x15\x64\xd7\xfe\x82\x77\x7d\x71\x22\x59\xaf\x4d\xf2\xea\xf4\x55\xa3\xaa\x0b\xc6\xbe\x49\x50\x09\xa4\x80\x93\x46\xa3\xfc\xfb\x08\x30\xc6\xd8\xa4\x93\x59\xd5\x3e\x9c\x73\x39\xe7\x72\x63\xaa\x2a\xc2\x88\xc4\x0f\xfc\x8c\xda\xc7\x69\x23\x95\x90\xfe\xed\x89\x1c\xfc\xe3\x9a\xee\xc1\x3f\xbf\x1c\x98\x20\x35\x42\x94\x6b\x90\x1b\x52\x01\x5e\x88\x1a\xf0\x2f\x84\x31\xad\x33\x5c\xe4\x13\x74\x41\x08\x78\xb3\xc7\x4b\x59\x83\xcc\xa9\x84\x4a\x53\xc1\x2d\xe5\xa1\x9c\x22\x8c\xf3\x59\x39\xed\x58\xae\xe0\x9c\x32\x58\x1e\x41\x9e\x24\xd5\xae\xda\xcb\xe2\xdf\xc5\xf2\x75\x81\x30\xfe\x31\x2b\x11\xc6\x8b\xa5\x91\xe8\xf3\x01\xf0\x8a\x6c\xa1\xe0\x1b\x61\x79\x3b\xa2\x16\xf0\xa5\x0d\x96\xe1\x7f\x84\x60\x40\xf8\xc4\xe1\x2b\x09\x47\x2a\x1a\x35\x5a\x53\x9a\x48\xed\xe2\x66\x3e\x36\xc6\xc0\xeb\x01\x76\x31\x39\x0f\x8d\xc6\xa5\x96\x94\x6f\xe7\x94\x69\x90\x2e\xab\x5a\x34\x8c\x75\x45\x8d\xfa\xb3\x21\x6c\x2d\xb2\x96\x8b\x30\xe6\x42\xcf\x46\x20\xe5\x19\x7e\x73\x6f\x93\x77\x47\x2a\x06\x10\x03\xa5\xd6\x3b\xc2\x7b\x2a\x0f\x2d\xe5\xb8\xe2\x56\x02\xd1\x20\x07\x8a\x1e\x9a\x12\x51\x5e\xb1\xa6\x06\x15\xdb\x2d\xc6\xa8\x27\x16\x5c\x01\x57\x54\xd3\x23\xa4\x35\x69\x82\xed\xb4\x7a\xa5\x7a\x17\xab\xca\x14\x1e\xc8\x57\x77\x2b\xff\x40\x01\x5e\x27\x76\x9b\x8d\x51\x4f\xbc\xba\xd3\xec\x5b\x02\xa3\x1f\x03\xfe\x63\x8c\x18\xc2\xd5\xda\x8f\x57\x16\xbb\x79\x2b\xb8\xbe\x6d\xd8\x0a\xae\x07\x93\xe6\x10\x3b\x66\x05\xd7\xd1\x8c\xf9\xf7\x30\x60\x8e\x9c\x98\x2e\xb7\x10\x8d\xd6\x08\x1a\xd0\x2f\x08\x7b\xf7\xf9\x8d\xe6\xf3\xa1\xf7\xbc\xb3\x9e\xc7\xce\xf3\xa1\xf1\xfc\x8a\xef\x7c\x64\x3b\xbf\xee\x3a\xef\x99\x9e\x33\x41\x6e\x6c\xba\xa5\x0e\xac\x7b\xcc\xba\xb7\x2f\x51\x80\x80\x84\x0c\x5e\x92\x88\xe1\x97\xa2\x24\x09\x70\x24\x09\x79\xcc\x47\xfb\xb6\x38\xf6\xf3\x1e\xa7\x69\x21\x1b\xc6\x3c\x47\x59\x3a\x20\x44\x69\xf9\x89\x24\xed\x4a\x14\x64\x8c\x0d\x05\xdd\x0f\xa1\xb5\x7b\x5b\x90\x00\xf5\xb3\x78\xb4\xab\xf9\xc0\xcf\xdf\xd4\x33\x1d\xb4\xb7\x4c\xd9\xfc\x54\x95\xa4\x87\xee\xf2\xd2\xc0\xd8\x13\x98\x61\xdf\x88\x49\xaf\xd3\x4f\x0d\xd3\xf4\xc0\xc0\xdd\x64\x85\xc5\x2c\x5f\xcc\x05\xab\x41\xf6\x7e\xfb\x1e\x2a\x6a\xff\x7b\x3a\x51\xbd\x5b\x11\xf3\x69\x0a\xee\x37\x94\x99\x6f\xf0\x9b\x2b\x38\x79\x37\x57\x96\xf0\x97\x63\x96\xba\x31\xd1\xc5\x79\x8e\xad\xac\xc8\xd9\xfc\xb1\x66\x7c\x4d\xb7\xbf\x11\xbb\xba\x5a\x2c\x43\xe5\x68\xf5\x96\x4d\xdb\x0e\x3c\x8a\x2d\xe5\x21\x78\xa3\x40\x72\xb2\xef\xbe\x6b\x66\x9f\x03\x51\xea\x24\x64\xdd\xc7\xa8\xfa\x1f\x78\x2d\xe4\x8b\x32\x4d\xea\xee\xe7\xd0\xd9\x67\xd8\x48\x50\xbb\xb5\xf8\x80\x5e\x79\x09\x1c\x4e\x4b\xf9\x0c\x47\xf1\x01\x91\xae\x95\x4d\x77\x84\x6f\x61\xd5\xee\x18\x84\x1c\x4e\xab\x84\x8d\xbf\xb2\xe6\xfa\x6c\x03\xf7\xdb\x6b\xc2\x9a\x7f\x84\x02\xa5\x6c\xaa\x0a\x94\xea\x93\xa8\x6a\xc1\xb8\x22\x7c\x69\xe0\x35\x6e\x0f\x50\x93\x6e\xe0\xf6\xd1\x69\xde\x49\xf8\xcc\x52\xc3\x36\xb9\x1f\xc2\xed\xa6\x26\x08\x33\x4e\xef\x6c\x5f\xb2\xde\x39\x19\x4d\x3f\xc4\xc4\xf6\x35\x74\xdb\x2b\x46\x27\x60\x84\x71\x34\x23\xad\xa2\x8e\x7b\x71\xe2\x1c\x52\xf2\x41\x0b\xfe\x6b\x40\x9e\xdd\x79\x89\x1a\xee\xda\xff\x2a\xef\x5d\x7f\x31\xba\xa0\xdf\x01\x00\x00\xff\xff\xac\xa9\xab\x47\xba\x0a\x00\x00")

func templateBase_sdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBase_sdlTmpl,
		"template/base_sdl.tmpl",
	)
}

func templateBase_sdlTmpl() (*asset, error) {
	bytes, err := templateBase_sdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/base_sdl.tmpl", size: 2746, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateNode_models_goTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\x55\x50\xc9\xcb\x4f\x49\x55\xb0\xb2\x55\xd0\x53\xd0\xad\xad\xe5\x82\x08\x25\xe6\x42\x84\xfc\x40\x0c\x90\x30\x57\x49\x65\x41\xaa\x42\x75\x35\x58\xaa\xb6\x56\xa1\xb8\xa4\xa8\x34\xb9\x44\xa1\x9a\x8b\x53\x2b\x35\xaf\x44\x0f\x2e\xc1\x55\xcb\xc5\x95\x56\x9a\x97\xac\x01\x17\xd1\x54\xf0\x2c\xf6\xcb\x4f\x49\xd5\xd0\x54\xa8\xae\xe5\xe2\x02\x04\x00\x00\xff\xff\xbc\xb7\x12\xae\x73\x00\x00\x00")

func templateNode_models_goTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_models_goTmpl,
		"template/node_models_go.tmpl",
	)
}

func templateNode_models_goTmpl() (*asset, error) {
	bytes, err := templateNode_models_goTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_models_go.tmpl", size: 115, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateNode_resolvers_goTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x6f\x9b\x4c\x10\xc6\xcf\xf0\x29\xe6\xb5\xa2\x08\x2c\x42\xa4\x1c\x23\xe5\xf2\xda\xae\xe4\x43\x4d\x5b\x45\xea\xa1\xaa\x2a\x0c\x83\xbb\x29\xec\xe2\x61\x69\xe2\xae\xf7\xbb\x57\xb3\x60\xfc\x27\x6e\x72\x48\x2e\x66\x98\x67\x66\x77\xf6\xd9\x9f\x31\xe6\x0a\x2e\xa4\xca\x11\x6e\xef\x20\x86\x2b\x6b\xfd\x2e\x95\x56\x5d\x6a\xc1\xc1\x90\x16\xf9\xfd\xa6\x76\xc2\x48\x48\x3d\x1a\x04\x51\x40\x3c\x9f\x3a\x8d\x53\x9e\x31\x07\xa5\x3b\x65\x0b\x2b\xc5\x41\xdf\x83\x32\x77\xc5\x7e\xd1\xca\x0c\x02\x82\xf1\xba\x45\xda\x7c\xc1\x46\x95\xbf\x91\x42\x30\xc6\x8d\x61\x6d\x90\xe9\x27\xc8\x94\xd4\xf8\xa4\xe3\x49\xf7\x8c\x40\xe4\x30\x6c\x63\x6d\x08\xc1\xb8\x52\x39\x96\xf1\xd0\x16\x01\x12\x29\x5e\xc8\xf7\xd6\x3c\x08\xc5\x33\xa9\x27\xa5\x40\xa9\xf7\x55\xf1\x67\xde\x35\x08\x7d\x6f\x1d\x7f\xfd\x89\x84\x01\x4b\x2a\xc7\xf8\x53\x9a\xfd\x4a\x57\x5c\x32\x9f\x06\x22\x0f\x43\xdf\xf7\x08\x9b\x08\x7e\xf0\x62\xeb\x38\x91\xe5\x86\x47\x0b\x7d\x4f\x14\x40\xd8\xc0\xdd\x1d\x48\x51\xf2\x7e\x1e\xa1\x6e\x49\xf2\x6b\xc4\x3f\xbe\x67\x7d\xaf\xe2\xbe\xcb\x93\x29\xcd\xfe\x9c\xb7\x6e\x11\xeb\xef\x9a\xab\xae\xf5\x75\x8b\x60\x0b\x75\xd9\x52\x5a\x8a\x3f\xff\xb4\x2b\x2d\x34\x12\x8c\x1b\x4d\x42\xae\x22\x58\x62\xa1\x08\xf7\xef\x85\xa0\x46\xc3\x58\x48\x1d\x41\x99\x0e\xe1\x23\x3b\x02\xa7\xce\x3a\x9f\xe6\xb2\x6e\x75\x04\x8a\x72\xa4\xff\x37\xf0\xed\xfb\x49\x51\xd2\x09\x67\x2e\x66\xa2\xa4\xc4\x4c\x0b\x25\x0f\xaf\xe8\xfa\x1a\xee\x93\x69\xe2\x7b\x75\x2a\x45\x16\x14\x95\x8e\x67\x2c\x16\xc1\x48\x2a\x0d\xa2\xaa\x4b\xac\x50\x6a\xcc\x47\x61\xc8\xa6\x18\x43\xa9\x5c\x21\x5c\x38\xca\xba\x3b\x9b\xe5\x2b\x6c\x76\xb4\xe2\xa2\xa7\xf8\x02\x63\xa6\xc4\xc1\xbc\x27\x56\x11\x0b\x1f\x6f\x12\x7e\x24\x37\x89\xa3\x71\x70\x7a\x6f\x6d\xa9\x1e\x91\x26\x69\x83\x1f\xd8\x23\x6b\x8f\xec\xef\x16\x85\x2d\xb4\x75\x7d\x54\x75\xfe\x16\xd4\xf2\xe1\x99\x9b\x47\x0e\xe1\xe2\x19\xbb\x8e\x39\x24\xe2\x93\xa8\xe5\x43\x07\xec\x8b\x5b\x87\x27\x6c\x72\xf3\x7f\x2f\xb3\xd9\xe7\x2e\x4f\x07\x71\x78\xf6\x71\xcf\xe7\x8e\x4a\xf7\x27\x2e\x1b\x7c\x9b\x6f\x59\x5a\x21\x73\xfb\x26\x0b\xdf\x0b\xef\xfe\xa0\xaf\xf0\xdd\x57\x9d\x03\xbc\x97\xde\x87\x70\x63\xdc\x47\xd2\x1e\x46\x7f\x03\x00\x00\xff\xff\xdb\xed\xec\x97\xb1\x05\x00\x00")

func templateNode_resolvers_goTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_resolvers_goTmpl,
		"template/node_resolvers_go.tmpl",
	)
}

func templateNode_resolvers_goTmpl() (*asset, error) {
	bytes, err := templateNode_resolvers_goTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_resolvers_go.tmpl", size: 1457, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateNode_sdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4d\x6f\xe3\x36\x13\x3e\xbf\xfa\x15\xa3\xc0\x07\x3b\xd8\x75\xf0\xe6\x28\xa0\x87\x4d\x9c\x00\x2a\x1a\x3b\x6d\xd2\xee\x21\xc8\x81\x6b\x8d\x1c\x02\x34\xa9\xa5\xa8\xdd\x75\x15\xfd\xf7\x62\x48\x7d\x5b\xfe\x0a\xb2\xed\xc9\x22\x87\x9c\x79\x66\xf8\xcc\x70\xe8\x3c\xff\x08\x23\xa9\x22\x84\xe0\x17\x98\xc2\xc7\xa2\xf0\xdc\x14\x5b\xbb\xa9\x39\x7d\xd4\xd3\x3c\x7a\xdc\x24\x56\x70\x16\xce\xce\xea\x79\x1e\xc3\x34\x9c\x59\x11\x4d\xfd\x2f\xcf\x5b\x2b\x2b\xc9\x2b\xa4\x4b\x26\x98\x26\x8d\xff\x87\x72\x27\xca\xc8\x6e\xf1\xf2\xfc\xe2\x1c\x6e\x64\xb6\x86\xf3\x8b\x5a\xaf\x66\x72\x85\x30\x8a\x49\x8d\x45\x39\xbd\xe5\x28\xa2\xb4\x31\xcb\x53\xbb\x67\x14\x03\x69\x44\xfa\xce\xf3\x51\xec\x60\xbf\xc2\x92\xad\x51\xf0\xbf\xb1\x28\x20\xef\x68\x94\x56\x65\x3c\xa5\xdd\x7f\x31\x91\x21\xe9\x04\xbb\x57\x96\xe6\x51\x46\x45\xe1\x15\x1e\x97\x49\x66\x76\x68\xbd\xe5\xc2\xa0\x86\xdc\x03\xe0\xe9\x3c\x13\x22\x80\x2b\xa5\x04\x32\xe9\x01\xe0\xd7\x8c\x89\x47\x15\xec\xd8\xeb\x01\x48\x65\x6e\x0e\x2e\xe2\x32\x80\xa7\x61\xa9\xff\xec\x94\x84\x7b\x97\xd4\x91\x2e\x0a\x68\x3e\x3d\x70\x31\xa7\xb3\x49\xab\xa0\x1b\x3a\xa8\x3c\xb7\xc7\x5f\x14\xc0\xd7\x89\xc0\x35\x4a\x93\xc2\x9c\x38\x62\xfd\x8c\x02\x08\x67\xfe\xde\xf3\x69\x13\x43\x2a\x43\x81\x7e\x40\x99\x72\xc3\xbf\x21\x94\x81\x86\x91\x29\x0f\xa1\xc3\x0c\xda\x0a\xe5\x82\x2d\x77\xe0\x15\x84\xfa\x8e\xfa\x9a\xa5\x78\xcb\x75\x6a\x8a\x22\xa8\x54\x15\x45\x9e\xf3\x18\x98\x8c\x60\x5c\xda\x9c\x61\xcc\x32\x61\x26\xf5\xc4\x22\x31\x5c\x49\x26\x9a\x99\x39\x17\x82\x7d\x11\x38\x29\x0a\xbf\x3a\xf2\x26\x44\xdd\xaf\xd2\x5b\x6c\xbc\xbd\x89\x56\x58\x91\x71\x84\xf3\x32\x67\x46\x38\xa5\xa0\x5a\xf0\x4d\x1c\x94\x26\xc1\xdd\xe5\x82\x7e\x16\x97\x8b\x2a\x0e\x23\x3c\xd2\x4b\x67\xa0\x74\xd3\xc2\xc7\xda\xa1\x3e\x7a\x91\xe2\x09\xfa\xe1\x15\x12\x91\x69\xe6\x18\xf3\x6b\xb6\x4e\xc6\xdf\x5f\x50\x63\xdb\xea\x67\x9a\x08\x29\x15\x3e\x40\xc2\x56\x18\xca\x08\x7f\x04\x10\xca\x72\xfc\x1b\xca\x95\x79\x29\x27\x94\x8e\x50\x5f\x6d\x1c\x29\x4b\x05\x0b\x9a\xf3\x9f\x27\x6d\xa5\xf7\x6c\x85\xfe\xdb\x50\x3e\x18\x4c\xc6\x2c\x36\xa8\x03\xb8\xce\x74\xaa\xf4\x07\xf8\x82\xb1\x22\xd4\xd5\x38\xa6\x6d\x25\x24\xc1\xea\xcf\xbd\xbe\x1d\x0b\xfd\x5a\x49\x89\x4b\x8a\xfe\x4e\xbe\xf0\x18\x5e\x58\xfa\x88\xeb\x44\x30\x83\x70\xc6\xa2\x88\xbb\xe3\xb2\x59\x72\xab\x34\xd1\xe4\xac\x2a\x85\xe6\xe0\xc2\x69\xc7\x44\xe1\x35\xe9\x4a\x64\x6c\x42\x6a\xf3\xd4\x28\xc3\xc4\xb5\xca\xa4\x73\x9b\xc2\xbc\xcc\xb4\xc6\xd6\x98\xb6\xa5\xce\x53\x97\xf0\xfe\x33\x4d\xb3\x24\x41\x19\x05\xf0\x49\x6e\x3c\x2a\x13\xdd\xa2\x40\x9c\xb7\x06\x96\x36\xca\x55\xb4\x2b\x7d\x41\xb3\xd2\xdf\x01\xb1\x09\xdd\x2e\xa0\x8e\x60\xb1\x0a\xe0\xbe\xfc\xa2\x59\xa4\x6c\x6b\xc3\x25\x28\x04\x99\x40\xd6\x55\xda\x89\x42\x37\x3c\x5c\xa5\xf6\x95\xa2\x37\x57\x22\xe8\x57\xdc\xff\xb0\x74\x84\x33\xaa\xd7\xb0\xcd\x4d\xa7\x75\x71\x79\xe7\x94\xdf\x9d\xac\xf5\x29\x9c\xf9\xcf\x7d\xc5\x35\x37\xdd\x81\x5c\x6b\x64\x06\xb7\x8e\x05\x60\x29\x38\x4a\x73\x97\x19\x46\x44\x08\xa3\x00\x1e\x8c\xe6\x72\xe5\x20\x48\x07\x60\xb0\x0c\xb6\x34\xf9\x8d\xa1\x3b\x15\xf1\x78\x73\x9a\xa1\xea\x2a\x7b\xa3\xc9\x19\x0a\x3c\xd5\x37\x32\xf9\x54\xb7\x47\x2e\xe3\xea\x1c\xeb\x05\xeb\x9e\x6d\x84\x62\xd1\xbb\x84\xcb\x87\x3a\x19\x7b\x91\xfa\x49\x56\x7a\xc1\x79\x07\x2b\x9d\x32\x45\x89\xf9\x0e\x99\x55\xa6\xd5\xcf\xb9\x8a\x77\xa6\x86\xed\xbb\x2c\x5d\x9a\xce\xab\x57\xbf\x9a\x2b\xa9\x6e\xba\x5a\xac\x71\x6d\xe7\x91\x2d\xf2\xae\x06\xec\xe8\xa2\xd6\x2b\x8b\x1d\xf3\xff\x56\x9f\xf4\xc2\xd2\xa1\xf3\x21\x80\x65\xc3\x5d\x82\x02\x50\xf1\xf0\xca\xcf\x9c\xfa\x13\x2b\x6b\x99\x6d\x02\x7d\x6c\x85\x3c\x01\xca\xce\xa5\x27\x62\x29\x1b\x76\xf8\x34\x9f\xb5\xf3\xa0\x59\x6f\x1f\x02\x8b\x3f\xf6\x08\xe7\x8b\xc7\x9d\xd2\xc2\xab\x5f\x4e\xb2\x69\x78\x2c\x8f\x0e\x5c\xa1\x5b\x54\xca\x64\x84\x3a\x5d\x2a\x6d\x07\x49\xe2\xc8\xd4\xcd\x85\xba\x80\x76\xed\x59\xa2\x03\x44\x5c\xbb\xe6\x20\x00\x3b\x3d\xab\xc6\xbe\x15\xc7\x64\x37\x18\x82\x5a\x67\xd6\xef\x19\xea\x4d\x95\x57\xf8\xc3\xd0\x1b\xd3\xd6\x24\x27\xc8\x2d\xe4\x8f\x70\x71\xbe\xa7\xdc\x8c\x7b\x19\xe7\x4f\x5a\x36\xe1\xfc\xe2\xe8\x07\x2a\xbd\x47\x46\xf1\xf4\x4f\xc9\xbf\x66\x58\x3f\x3b\xea\x64\x9c\x54\x11\x94\x07\x53\xf1\x6a\xd3\x09\x74\x15\xdb\x0a\x70\x5b\x78\x54\x16\x77\x5c\xda\x41\xb8\x23\x80\xed\x7d\x3c\xf4\xc9\x76\xea\xdb\x41\x6e\xf7\xdf\xb2\xff\x72\x38\x0d\xe0\xbb\xbc\x1b\xb6\xdd\x3a\x0e\x75\xeb\xd1\x50\x91\xb5\xba\x06\x87\xf8\x5a\xcb\x72\xba\xee\x96\xdd\xee\x60\x6c\x73\x28\x18\xec\xb0\xe8\x68\x87\x9b\x09\x0f\x60\xdd\xbd\xff\x2b\x3d\x43\x0d\x14\xe9\x19\x6e\x17\x3c\x80\xa8\x7b\xc3\x57\x7a\x86\xba\x22\xd2\x33\xdc\x10\x1c\xae\x2e\x29\x9a\x7a\xd3\xf0\x5f\x1c\xe3\xb2\x8f\xfb\x00\xdf\x98\xc8\x70\x90\xec\x93\xce\xbb\xa4\x53\x8b\xfe\x09\x00\x00\xff\xff\x45\x91\x75\x83\x03\x13\x00\x00")

func templateNode_sdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_sdlTmpl,
		"template/node_sdl.tmpl",
	)
}

func templateNode_sdlTmpl() (*asset, error) {
	bytes, err := templateNode_sdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_sdl.tmpl", size: 4867, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/base_models_go.tmpl": templateBase_models_goTmpl,
	"template/base_resolvers_go.tmpl": templateBase_resolvers_goTmpl,
	"template/base_sdl.tmpl": templateBase_sdlTmpl,
	"template/node_models_go.tmpl": templateNode_models_goTmpl,
	"template/node_resolvers_go.tmpl": templateNode_resolvers_goTmpl,
	"template/node_sdl.tmpl": templateNode_sdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"base_models_go.tmpl": &bintree{templateBase_models_goTmpl, map[string]*bintree{}},
		"base_resolvers_go.tmpl": &bintree{templateBase_resolvers_goTmpl, map[string]*bintree{}},
		"base_sdl.tmpl": &bintree{templateBase_sdlTmpl, map[string]*bintree{}},
		"node_models_go.tmpl": &bintree{templateNode_models_goTmpl, map[string]*bintree{}},
		"node_resolvers_go.tmpl": &bintree{templateNode_resolvers_goTmpl, map[string]*bintree{}},
		"node_sdl.tmpl": &bintree{templateNode_sdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

