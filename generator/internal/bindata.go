// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/base_models_go.tmpl
// template/base_resolvers_go.tmpl
// template/base_sdl.tmpl
// template/node_models_go.tmpl
// template/node_resolvers_go.tmpl
// template/node_sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateBase_models_goTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\x4d\x0a\x02\x31\x10\x44\xe1\xb5\x7d\x8a\x5a\xcc\x42\xc1\xf1\x00\x82\x07\xf0\x18\x8d\xd3\x0c\xc1\xfc\x99\xc4\x55\x5b\x77\x17\xe3\xf6\xf1\xf1\xaa\x3e\x9e\xba\x1b\x52\xd9\x2c\x8a\x84\x54\x4b\x1b\x38\x8a\xfb\x8a\xa6\x79\x37\x2c\x21\xd5\x33\x16\x8d\x41\x3b\xae\x37\x5c\xee\xd3\x74\x52\x0e\xee\xff\x4e\xc2\xfd\x07\xf1\xc1\xeb\x5d\x86\x91\xf3\x60\x79\xc3\x4a\xca\x49\xbe\x01\x00\x00\xff\xff\x19\x7a\x60\x66\x68\x00\x00\x00")

func templateBase_models_goTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBase_models_goTmpl,
		"template/base_models_go.tmpl",
	)
}

func templateBase_models_goTmpl() (*asset, error) {
	bytes, err := templateBase_models_goTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/base_models_go.tmpl", size: 104, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateBase_resolvers_goTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcc\xc1\x09\x02\x31\x10\x85\xe1\xb3\x53\xc5\x3b\xec\x41\xc1\xb5\x00\xc1\x02\x2c\x63\xd0\x21\x06\xdd\xcd\x98\xc4\xd3\xf8\x7a\x17\xb3\xd7\x9f\x8f\xdf\xf5\xf6\xd4\x64\x48\x55\xfd\x21\x92\x17\x2f\xb5\x63\x2f\x11\x33\xaa\xae\xc9\x30\xe5\xc5\x8f\x98\xf4\x95\xb5\xe1\x7c\xc1\xe9\x3a\x4c\x23\x65\x17\xb1\x75\x12\x11\x7f\x88\x2f\xde\x9f\xd2\x8d\x1c\x07\x5b\xef\x98\x49\x39\x88\xfc\x02\x00\x00\xff\xff\xd8\x63\xe0\x02\x69\x00\x00\x00")

func templateBase_resolvers_goTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBase_resolvers_goTmpl,
		"template/base_resolvers_go.tmpl",
	)
}

func templateBase_resolvers_goTmpl() (*asset, error) {
	bytes, err := templateBase_resolvers_goTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/base_resolvers_go.tmpl", size: 105, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateBase_sdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\xcd\x72\xe3\x2c\x10\xbc\xeb\x29\xd0\x2d\x79\x05\xdd\xf2\x59\x4e\x95\xaa\xf2\xe3\x2f\x72\x76\x0f\xa9\x1c\x58\x69\x6c\x53\xc1\x83\x02\x28\x89\x6b\xcb\xef\xbe\x05\x08\x21\xf4\x93\xf5\xde\x44\xd3\x3d\x74\x8f\xc6\xc2\xaa\xa2\x9c\x4a\x72\x83\xa7\xa4\x7b\x5c\xb5\x52\x09\xe9\x57\xf7\xb4\xf1\x8f\x5b\x76\x04\xff\xfc\xdc\x70\x41\xeb\x24\x61\xa8\x41\xee\x68\x05\xe4\x41\xd4\x40\x7e\x27\x84\xb0\x3a\x23\x45\x9e\x26\xe7\x24\x01\x6c\x8f\xe4\x51\xd6\x20\x73\x26\xa1\xd2\x4c\xa0\xa5\xdc\x94\xab\x84\x90\x7c\x5d\xae\x0c\x4b\x9f\x1a\x20\x1b\xba\x87\x02\x77\xc2\xee\x1f\xa8\x7a\x80\x2f\x6d\xb0\x8c\xfc\x27\x04\x07\x8a\xa9\xc3\x37\x12\x3e\x98\x68\xd5\x64\x4f\x69\x2a\xb5\xf3\x9e\xf9\x0c\x84\x00\xd6\x23\xec\x6c\x4c\x37\xad\x26\xa5\x96\x0c\xf7\xb7\x8c\x6b\x90\xce\xb8\x7a\x68\x39\xef\x8b\x1a\xf5\x7b\x4b\xf9\x56\x64\x1d\x37\x21\x04\x85\x5e\x4f\x40\x86\x19\x79\x71\xab\xf4\xd5\x91\x8a\x11\xc4\x41\xa9\xed\x81\xe2\x40\xe5\xa1\x47\x39\xad\xb8\x97\x40\x35\xc8\x91\x62\x80\xce\x89\x18\x56\xbc\xad\x41\xc5\x76\x8b\x29\xea\x89\x05\x2a\x40\xc5\x34\xfb\x80\x79\xcd\x3c\xc1\x76\x5a\xfd\x64\xfa\x10\xab\xca\x39\x3c\x90\x17\x4f\x2b\xff\x42\x01\xac\x67\x4e\x5b\x4f\x51\x4f\x5c\x3c\x69\xfd\x2d\x81\xb3\xb7\x11\xff\x2e\x46\x0c\x61\xb1\xf6\xdd\xc2\x66\x3f\x6f\x05\xea\xcb\x86\xad\x40\x3d\x9a\x34\x87\xd8\x31\x2b\x50\x47\x33\xe6\xd7\x61\xc0\x1c\x79\x66\xba\xdc\x46\x34\x5a\x13\x68\x44\x3f\x27\xc4\xbb\xcf\x2f\x34\x9f\x8f\xbd\xe7\xbd\xf5\x3c\x76\x9e\x8f\x8d\xe7\x0b\xbe\xf3\x89\xed\x7c\xd9\x75\x3e\x30\x7d\xcb\x05\xbd\xb0\xe9\x96\x3a\xb2\xee\x31\xeb\xde\x2e\xa2\x00\x01\x09\x19\xbc\x64\x26\x86\xdf\x8a\x92\xcc\x80\x13\x49\xc8\x63\xbe\xc0\x97\xc5\xb1\xdf\xea\x38\x4d\x07\xd9\x30\xe6\x39\xca\xd2\x03\x21\x4a\xc7\x9f\x49\xd2\xed\x44\x41\xa6\xd8\x58\xd0\xff\x10\x3a\xbb\x97\x05\x09\xd0\x30\x8b\x47\xfb\x9a\x37\x78\xfa\xa6\x9e\xe9\xa0\xbd\x65\xca\xf6\x97\xaa\x24\x6b\xfa\x9b\x48\x03\xe7\xf7\x60\x86\x7d\x27\xd2\xfe\x32\x72\xb7\x1b\xd4\xb7\x8c\x87\x3b\xad\xfb\x9a\x27\x84\xec\xe2\x25\xd2\x23\x0c\xd7\x47\x76\x84\xed\xa9\x19\x60\xe7\xce\xa5\xab\xbb\x58\x95\x43\xd6\x51\xd2\x90\xec\x4e\xec\x19\x16\xf6\xd1\x68\x5a\x05\x72\x7c\x60\x43\x95\xfa\x14\x32\xaa\xc6\xd4\x0f\xc0\x5a\xc8\x67\x05\x72\x70\x4f\x86\x59\x7a\x82\x9d\x04\x75\xd8\x8a\x37\x18\x94\x97\x80\xf0\xf9\x28\x9f\xe0\x43\xbc\x41\xa4\xeb\x64\xab\x03\xc5\x3d\x6c\xba\x13\x83\x10\xe1\x73\x33\x63\xe3\x9f\xac\xb9\xe6\xdb\xc0\x1b\x7a\x32\x7d\xb0\xa5\x4d\x58\xf3\xef\x22\x50\xca\xb6\xaa\x40\xa9\x21\x89\xa9\x0e\x8c\x2b\xc2\x97\x06\xac\x89\x55\xdd\xb7\x9a\xf6\x2f\xfe\xd8\x72\xcd\x1a\x0e\xae\xdf\x57\x12\xde\x33\xf2\x12\xde\x4f\xfa\x9a\x5e\xf7\x00\x78\xc8\xfc\x1c\x8c\xbb\x2b\xdb\x8b\x6c\xf0\x6e\x0c\x7b\x68\x3c\xb5\xbd\x0c\x1d\xf6\x8a\x49\xd7\x8d\x30\x8e\x63\xa4\x55\xd4\x65\x2f\x9e\xe9\xfd\x9c\x7c\x14\xfb\xff\x16\xe4\xc9\xbd\x23\x51\xc3\x55\xf7\xf7\xec\xda\xf5\x94\x24\xe7\xe4\x4f\x00\x00\x00\xff\xff\xe7\xf3\xf9\x93\x03\x0a\x00\x00")

func templateBase_sdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBase_sdlTmpl,
		"template/base_sdl.tmpl",
	)
}

func templateBase_sdlTmpl() (*asset, error) {
	bytes, err := templateBase_sdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/base_sdl.tmpl", size: 2563, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateNode_models_goTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\xd6\x55\x50\xc9\xcb\x4f\x49\x55\xb0\xb2\x55\xd0\x53\xd0\xad\xad\xe5\x82\x08\x25\xe6\x42\x84\xfc\x40\x0c\x90\x30\x57\x49\x65\x41\xaa\x42\x75\x35\x58\xaa\xb6\x56\xa1\xb8\xa4\xa8\x34\xb9\x44\xa1\x9a\x8b\x53\x2b\x35\xaf\x44\x0f\x2e\xc1\x55\xcb\xc5\x95\x56\x9a\x97\xac\x01\x17\xd1\x54\xf0\x2c\xf6\xcb\x4f\x49\xd5\xd0\x54\xa8\xae\xe5\xe2\x02\x04\x00\x00\xff\xff\xbc\xb7\x12\xae\x73\x00\x00\x00")

func templateNode_models_goTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_models_goTmpl,
		"template/node_models_go.tmpl",
	)
}

func templateNode_models_goTmpl() (*asset, error) {
	bytes, err := templateNode_models_goTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_models_go.tmpl", size: 115, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateNode_resolvers_goTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x6f\x9b\x4c\x10\xc6\xcf\xf0\x29\xe6\xb5\xa2\x08\x2c\x42\xa4\x1c\x23\xe5\xf2\xda\xae\xe4\x43\x4d\x5b\x45\xea\xa1\xaa\x2a\x0c\x83\xbb\x29\xec\xe2\x61\x69\xe2\xae\xf7\xbb\x57\xb3\x60\xfc\x27\x6e\x72\x48\x2e\x66\x98\x67\x66\x77\xf6\xd9\x9f\x31\xe6\x0a\x2e\xa4\xca\x11\x6e\xef\x20\x86\x2b\x6b\xfd\x2e\x95\x56\x5d\x6a\xc1\xc1\x90\x16\xf9\xfd\xa6\x76\xc2\x48\x48\x3d\x1a\x04\x51\x40\x3c\x9f\x3a\x8d\x53\x9e\x31\x07\xa5\x3b\x65\x0b\x2b\xc5\x41\xdf\x83\x32\x77\xc5\x7e\xd1\xca\x0c\x02\x82\xf1\xba\x45\xda\x7c\xc1\x46\x95\xbf\x91\x42\x30\xc6\x8d\x61\x6d\x90\xe9\x27\xc8\x94\xd4\xf8\xa4\xe3\x49\xf7\x8c\x40\xe4\x30\x6c\x63\x6d\x08\xc1\xb8\x52\x39\x96\xf1\xd0\x16\x01\x12\x29\x5e\xc8\xf7\xd6\x3c\x08\xc5\x33\xa9\x27\xa5\x40\xa9\xf7\x55\xf1\x67\xde\x35\x08\x7d\x6f\x1d\x7f\xfd\x89\x84\x01\x4b\x2a\xc7\xf8\x53\x9a\xfd\x4a\x57\x5c\x32\x9f\x06\x22\x0f\x43\xdf\xf7\x08\x9b\x08\x7e\xf0\x62\xeb\x38\x91\xe5\x86\x47\x0b\x7d\x4f\x14\x40\xd8\xc0\xdd\x1d\x48\x51\xf2\x7e\x1e\xa1\x6e\x49\xf2\x6b\xc4\x3f\xbe\x67\x7d\xaf\xe2\xbe\xcb\x93\x29\xcd\xfe\x9c\xb7\x6e\x11\xeb\xef\x9a\xab\xae\xf5\x75\x8b\x60\x0b\x75\xd9\x52\x5a\x8a\x3f\xff\xb4\x2b\x2d\x34\x12\x8c\x1b\x4d\x42\xae\x22\x58\x62\xa1\x08\xf7\xef\x85\xa0\x46\xc3\x58\x48\x1d\x41\x99\x0e\xe1\x23\x3b\x02\xa7\xce\x3a\x9f\xe6\xb2\x6e\x75\x04\x8a\x72\xa4\xff\x37\xf0\xed\xfb\x49\x51\xd2\x09\x67\x2e\x66\xa2\xa4\xc4\x4c\x0b\x25\x0f\xaf\xe8\xfa\x1a\xee\x93\x69\xe2\x7b\x75\x2a\x45\x16\x14\x95\x8e\x67\x2c\x16\xc1\x48\x2a\x0d\xa2\xaa\x4b\xac\x50\x6a\xcc\x47\x61\xc8\xa6\x18\x43\xa9\x5c\x21\x5c\x38\xca\xba\x3b\x9b\xe5\x2b\x6c\x76\xb4\xe2\xa2\xa7\xf8\x02\x63\xa6\xc4\xc1\xbc\x27\x56\x11\x0b\x1f\x6f\x12\x7e\x24\x37\x89\xa3\x71\x70\x7a\x6f\x6d\xa9\x1e\x91\x26\x69\x83\x1f\xd8\x23\x6b\x8f\xec\xef\x16\x85\x2d\xb4\x75\x7d\x54\x75\xfe\x16\xd4\xf2\xe1\x99\x9b\x47\x0e\xe1\xe2\x19\xbb\x8e\x39\x24\xe2\x93\xa8\xe5\x43\x07\xec\x8b\x5b\x87\x27\x6c\x72\xf3\x7f\x2f\xb3\xd9\xe7\x2e\x4f\x07\x71\x78\xf6\x71\xcf\xe7\x8e\x4a\xf7\x27\x2e\x1b\x7c\x9b\x6f\x59\x5a\x21\x73\xfb\x26\x0b\xdf\x0b\xef\xfe\xa0\xaf\xf0\xdd\x57\x9d\x03\xbc\x97\xde\x87\x70\x63\xdc\x47\xd2\x1e\x46\x7f\x03\x00\x00\xff\xff\xdb\xed\xec\x97\xb1\x05\x00\x00")

func templateNode_resolvers_goTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_resolvers_goTmpl,
		"template/node_resolvers_go.tmpl",
	)
}

func templateNode_resolvers_goTmpl() (*asset, error) {
	bytes, err := templateNode_resolvers_goTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_resolvers_go.tmpl", size: 1457, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateNode_sdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\xcd\x6e\xe3\x36\x10\x3e\x57\x4f\x31\x0a\x7c\xb0\x83\xc4\x41\x73\x14\xd0\x43\x13\x27\x80\x8b\xc6\x4e\x9b\xb4\x7b\x58\xe4\xc0\xb5\x46\x0e\x01\x9a\x52\x24\x6a\x77\x5d\x85\xef\x5e\x0c\x49\xfd\x46\xf2\x4f\x90\x6d\x4f\xa6\x38\xe4\x37\xdf\x0c\x67\x86\x43\x17\xc5\x39\x8c\x64\x1c\x22\x04\xbf\xc0\x14\xce\xb5\xf6\xec\x14\xdb\xd8\xa9\x05\x0d\xaa\x69\x1e\x3e\x6e\x13\x23\x38\x99\xcf\x4e\xaa\x79\x1e\xc1\x74\x3e\x33\x22\x9a\xfa\xa9\x28\x1a\x2b\x4b\xc9\x2b\x64\x2b\x26\x58\x4a\x88\x3f\x83\xdb\x89\x32\x34\x5b\xbc\xa2\xb8\x38\x85\x1b\x99\x6f\xe0\xf4\xa2\xc2\x4d\x99\x5c\x23\x8c\x22\x82\x31\x2c\xa7\xb7\x1c\x45\x98\xd5\x6a\x79\x66\xf6\x8c\x22\x20\x44\xa4\x71\x51\x8c\x22\x4b\xfb\x15\x56\x6c\x83\x82\xff\x83\x5a\x43\xd1\x42\x94\x06\x32\x9a\xd2\xee\xbf\x99\xc8\x91\x30\xc1\xec\x95\x4e\x3d\xca\x50\x6b\x4f\x7b\x5c\x26\xb9\x1a\x40\xbd\xe5\x42\x61\x0a\x85\x07\xc0\xb3\x45\x2e\x44\x00\x57\x71\x2c\x90\x49\x0f\x00\x5f\x72\x26\x1e\xe3\x60\x60\xaf\x07\x20\x63\x75\xb3\x77\x11\x97\x01\x7c\xee\x97\xfa\x4f\x16\x64\xbe\x73\x49\xe5\x69\xad\xa1\x1e\x7a\x60\x7d\x4e\x67\x93\x95\x4e\x57\x74\x50\x45\x61\x8e\x5f\x6b\xe0\x9b\x44\xe0\x06\xa5\xca\x60\x41\x31\x62\xec\x0c\x03\x98\xcf\xfc\x9d\xe7\xd3\x0c\x0c\x19\x2b\x72\xf4\x03\xca\x8c\x2b\xfe\x15\xc1\x39\x1a\x46\xca\x1d\x42\x2b\x32\x68\x2b\xb8\x05\x6f\xcc\x81\x57\x10\xf1\x37\x4c\xaf\x59\x86\xb7\x3c\xcd\x94\xd6\x41\x09\xa5\x75\x51\xf0\x08\x98\x0c\x61\xec\x74\xce\x30\x62\xb9\x50\x93\x6a\x62\x99\x28\x1e\x4b\x26\xea\x99\x05\x17\x82\x7d\x11\x38\xd1\xda\x2f\x8f\xbc\x76\x51\x7b\xe4\xac\xc5\xda\xda\x9b\x70\x8d\x65\x30\x8e\x70\xe1\x72\x66\x84\x53\x72\xaa\x21\x5f\xfb\x21\x4e\x49\x70\x77\xb9\xa4\x9f\xe5\xe5\xb2\xf4\xc3\x08\x0f\xb4\xd2\x2a\x70\x66\x1a\xfa\x58\x19\xd4\x65\x2f\x32\x3c\x02\x1f\x5e\x21\x11\x79\xca\x6c\xc4\xfc\x96\x6f\x92\xf1\xb7\x67\x4c\xb1\xa9\xf5\x13\x4d\xcc\x29\x15\xce\x20\x61\x6b\x9c\xcb\x10\xbf\x07\x30\x97\xee\xfb\x77\x94\x6b\xf5\xec\x26\xe2\x34\xc4\xf4\x6a\x6b\x83\xd2\x01\x2c\x69\xce\x7f\x9a\x34\x41\xef\xd9\x1a\xfd\xf7\xb1\x7c\x50\x98\x8c\x59\xa4\x30\x0d\xe0\x3a\x4f\xb3\x38\x3d\x83\x2f\x18\xc5\xc4\xba\xfc\x8e\x68\x9b\xa3\x24\x58\x35\xdc\x69\xdb\xa1\xd4\xaf\x63\x29\x71\x45\xde\x1f\x88\x97\x8b\x53\x70\x27\x8f\x2f\xc0\xc2\x90\xdb\x93\x32\x09\x72\x1b\xa7\xa6\x24\x6a\x0d\xa7\x17\x6e\x9f\xc2\x4d\x22\x98\x42\x38\xe9\x5f\x7c\x02\xd3\x26\xae\x4d\x67\xb3\x5b\x7b\x75\xde\x52\x54\xd6\xbe\x35\x09\xab\x62\xc5\xc4\x75\x9c\x4b\x6b\x3f\xf9\x7b\x95\xa7\x29\x36\xbe\x69\x5b\x66\x4d\xb6\x99\xef\x3f\xf9\x1e\x55\x88\x76\x3d\xa0\x70\x37\x90\x2b\xe3\xe0\xd2\xd1\x25\x42\x50\xaf\xf4\x07\x48\xd5\x5e\x1b\xa2\x66\x63\x2b\x8a\x03\xb8\x77\x23\x9a\x45\x4a\xb4\x26\x41\xa2\x52\x92\xac\x0a\xb4\x15\xcd\xed\xe7\xfe\x02\xb5\xab\x0a\xbd\xbb\x08\x41\xb7\xd8\xfe\x8f\x55\x63\x3e\xa3\x52\x0d\x9d\x00\xad\x50\x97\x97\x77\x16\xfc\xee\x68\xd4\xcf\xf3\x99\xff\xd4\x05\x2e\x2f\x4c\x77\x20\xd7\x29\x32\x85\x6f\x8e\x05\x60\x25\x38\x4a\x75\x97\x2b\x46\x81\x30\x0f\x03\x78\x50\x29\x97\x6b\x4b\x41\x5a\x02\xbd\x15\xb0\x81\xe4\xd7\x8a\xee\xe2\x90\x47\xdb\xe3\x14\x95\xb7\xd8\x3b\x55\xce\x50\xe0\xb1\xb6\x91\xca\xaa\x31\xb2\x29\xe2\x12\xac\xe3\xa9\x7b\xb6\x15\x31\x0b\x3f\xc4\x57\x3e\x54\x99\xd8\x71\xd3\x0f\xd2\xd2\xf1\xcc\x07\x6b\x81\x8f\xc8\x29\x97\x50\x3f\xe6\xfe\x1d\x4c\x0a\x53\xb9\x4d\xa0\xd4\xed\x56\xa7\x72\xd5\xf7\x50\xd5\x69\x35\x02\xc6\xf6\x9a\x07\xf6\xc5\x43\x5d\xd7\xc1\xe5\xac\x53\x10\x5b\xea\xff\xab\xe6\xe8\x99\x65\x7d\xe7\x43\x04\x5d\x97\xed\x48\x01\xc4\x51\xff\xca\x4f\x9c\x9a\x12\x23\x6b\xa8\xad\x1d\x7d\x68\x6d\x3c\x82\xca\xe0\xd2\x23\xb9\xb8\x2e\x1d\x7e\x5d\xcc\x9a\x37\x5f\xbd\xde\x74\xff\xcb\x3f\x77\x08\x17\xcb\xc7\x41\xa9\xf6\xaa\xe7\x92\xac\xbb\x1c\x13\x47\x7b\x2e\xcf\x37\xa1\x94\x27\x89\x8d\x9f\x76\xf8\x57\xd5\xb2\xad\xc2\xc4\x36\x40\xc8\x53\xdb\x09\x04\x60\xa6\x67\xe5\xb7\x6f\xc4\x11\xa9\x0a\xfa\xd8\x55\xc9\xf4\x47\x8e\xe9\xb6\x4c\x25\xfc\xae\xe8\x2d\x69\x6a\x90\x15\x14\x86\xe5\x39\x98\x86\x69\xa8\xbc\x8c\xbb\x55\x79\xd2\xd0\x59\x37\x67\xfb\x13\x8e\xde\x1d\xa3\x68\xfa\x97\xe4\x2f\x39\x56\xcf\x8b\x2a\xff\x26\xa5\xd3\xe4\xde\xec\xbb\xda\xf6\xfa\xb6\x24\xdc\x14\x1e\x94\xb8\x2d\x93\x06\x62\xec\x00\x62\x3b\x1f\x09\xdd\xf8\x3a\xf6\x8d\x20\xdf\xf6\xd9\xb2\xfb\x42\x38\x8e\xe0\x87\xbc\x0f\xde\x9a\x75\x18\xeb\xc6\xe3\xa0\x0c\xd6\xf2\xda\xeb\x8b\xd7\x4a\x56\xd0\x0d\xb7\x6a\x77\x03\x63\x93\x43\x41\x6f\x3b\x45\x47\xdb\xdf\x3c\x78\x00\x9b\xf6\x7d\x5f\xe2\xf4\x75\x4b\x84\xd3\xdf\x1e\x78\x00\x61\xfb\x46\x2f\x71\xfa\x5a\x20\xc2\xe9\x6f\x00\xf6\x17\x94\x0c\x55\xb5\xa9\xff\xaf\x8c\xb1\x6b\xda\xce\xe0\x2b\x13\x39\xf6\x06\xfb\xa4\xf5\x08\x69\xd5\xa2\x7f\x03\x00\x00\xff\xff\x25\xbf\x4a\xd2\xeb\x12\x00\x00")

func templateNode_sdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_sdlTmpl,
		"template/node_sdl.tmpl",
	)
}

func templateNode_sdlTmpl() (*asset, error) {
	bytes, err := templateNode_sdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_sdl.tmpl", size: 4843, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/base_models_go.tmpl":    templateBase_models_goTmpl,
	"template/base_resolvers_go.tmpl": templateBase_resolvers_goTmpl,
	"template/base_sdl.tmpl":          templateBase_sdlTmpl,
	"template/node_models_go.tmpl":    templateNode_models_goTmpl,
	"template/node_resolvers_go.tmpl": templateNode_resolvers_goTmpl,
	"template/node_sdl.tmpl":          templateNode_sdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"base_models_go.tmpl":    &bintree{templateBase_models_goTmpl, map[string]*bintree{}},
		"base_resolvers_go.tmpl": &bintree{templateBase_resolvers_goTmpl, map[string]*bintree{}},
		"base_sdl.tmpl":          &bintree{templateBase_sdlTmpl, map[string]*bintree{}},
		"node_models_go.tmpl":    &bintree{templateNode_models_goTmpl, map[string]*bintree{}},
		"node_resolvers_go.tmpl": &bintree{templateNode_resolvers_goTmpl, map[string]*bintree{}},
		"node_sdl.tmpl":          &bintree{templateNode_sdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
