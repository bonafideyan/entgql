// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/node_sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateNode_sdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x8c\x84\x1c\xb2\x41\x3e\xee\x02\xf6\xe0\xd8\x09\x60\x60\xd7\xd9\x4d\x1c\xf4\x50\x04\x0d\x63\x8d\x64\x02\x14\xa9\xf2\xa3\x89\xab\xf0\xbf\x17\x43\xca\x92\xec\xc4\x4d\x51\xf4\x46\xf1\xe3\xcd\x7b\x8f\x8f\xa3\xb6\x3d\x83\x23\xa9\x0a\x84\xfc\x6f\x38\x87\x33\xef\x93\x38\xc5\xea\x38\xb5\xa0\x01\x4d\x27\x6d\x7b\x71\x02\x57\xd2\xd5\x06\x4e\x2e\xbc\x4f\x50\xba\x1a\xda\x36\x6c\xf5\xfe\x46\x17\xa8\x2f\x37\xd0\x26\x00\x8b\xc9\xf2\xfe\x76\xf2\x4f\x02\x30\x9f\x7d\x99\xdc\x4d\xe3\x60\x76\x75\x37\x0d\xe0\x9a\xc9\x0a\xe1\x88\x13\x7e\xa8\x7d\x3e\x97\x05\xbe\xa0\xf1\x3e\x01\x42\xe4\xb1\xea\x2b\xb8\xa6\x41\x3d\x65\x06\xbd\xef\x70\x0e\xad\xf6\xe0\x28\x0b\xef\x93\x2d\xdd\xe5\xa6\xc1\x8e\xae\xdd\x34\x38\xd0\x05\x5e\x37\x02\x6b\x94\xd6\xc0\x82\xe4\x13\x6f\x5e\xe4\x30\x9f\xa5\x63\x92\xe5\x40\xf2\x9a\xa3\x28\x7a\x8e\xe5\x96\xc5\x8a\xd5\x28\xf8\x77\x1a\x0a\xf5\x1c\x09\x5d\x73\x6d\xac\xf7\x79\xdc\x48\x24\xe0\x15\xcc\x8a\x09\xa6\x17\xa1\x7c\xdb\xf2\x12\xa4\xb2\x40\x38\x5c\x08\xf6\x24\xd0\xfb\xb4\x6d\x23\xfd\x1d\x21\x59\x96\x4d\xe0\xb1\x67\xfe\x08\x58\x54\x08\x5c\x82\x5d\x23\xac\x94\x94\xb8\xb2\x5c\xc9\xf3\x2c\xcb\xf6\x44\x5e\xd1\x46\x12\x16\x20\x56\x4e\x1b\xa5\xa1\x54\x1a\x9c\x09\x00\x0d\xab\xb8\x64\xfd\x61\xe8\xb6\xe4\x70\x67\x35\x97\x55\x1a\x4f\x2e\xd7\xb8\x53\x9e\xd9\x50\x19\x65\x01\xaa\x8c\xc3\xa2\xc2\x0e\x81\x9c\xca\x07\x06\x69\x2f\x60\x20\x0a\x56\x01\x03\xc1\x8d\xa5\xf3\x63\xe4\x6f\x4c\x38\x34\xbb\x42\xc8\xf9\xe8\xd9\x74\x40\xe8\x35\x6d\x51\x88\x81\x81\xe7\x35\x5f\xad\xa9\x92\x65\x5c\x9a\x40\x6d\x87\xb8\x2c\xb6\x26\x10\x05\x5e\xbc\xeb\x41\x80\xca\xe1\xf3\x8e\x8b\xe9\x43\x67\xc6\x5c\x96\x4a\xd7\xac\xd7\x71\x00\xa4\x61\x15\xd2\xd6\x1c\xfe\xeb\x46\x23\x33\x57\xca\xc9\xc0\x9a\x09\xb1\x43\x70\xa3\x1c\x2d\x8a\x02\x2a\xb4\x50\x6a\x55\xbf\x77\xc7\x00\x56\x59\x26\xa6\x84\x92\xc3\x5c\xda\xb4\x8f\xfb\x5c\x36\xce\x6e\x03\xcf\xe9\x63\xb8\x8a\x4f\x6b\xd4\x38\x8f\x73\x5d\xd6\xe3\x35\x5f\x73\x61\x51\x7f\x14\x7a\x5a\xe6\x25\xe5\xf5\x5e\xf2\xaf\x0e\xff\xcc\x3b\x18\xd5\xde\x4f\x3e\xc0\x64\x31\x1b\xdf\xc3\x20\x20\x7d\x48\x00\x6e\x6e\x7f\xb2\xb8\xb8\x59\x1e\x5c\xdd\x9a\xf5\xbf\x43\xbd\xe9\x5a\xd9\x8b\xa5\x38\x87\xd0\xc5\xe9\x36\xaa\x93\x51\xdb\xbe\xa0\xe3\xae\x53\xfc\x35\x8a\xfa\xef\x1a\x28\x3f\xb4\xef\x72\x33\xf6\xb9\xef\x7a\x5b\x2e\xe3\xc5\x5f\x77\xfe\x2d\xf7\xb7\x17\x90\x65\xd9\x2d\xb2\xc2\x84\x97\x83\x92\x9a\x94\x19\x65\x1d\xec\x5a\x2b\x57\xad\x81\x81\xc1\xfd\xc7\xdc\x45\xf5\x90\x87\xf0\x0a\x8d\x70\x9a\x91\x64\xef\x8f\x59\x69\xb1\xef\x3b\xa7\xf0\x84\xa5\xd2\x38\x7c\x97\x74\x24\x64\xfd\x14\x04\xeb\x87\xcf\x74\xad\xf9\x7b\x11\x3f\x05\x15\xff\x47\xe3\x14\x74\xbf\xa8\xf4\x61\x2c\x7d\xe8\x2a\x7d\x30\xfe\x75\x36\xea\x0b\xd9\xf8\x11\x00\x00\xff\xff\x67\x99\x53\x88\x22\x07\x00\x00")

func templateNode_sdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_sdlTmpl,
		"template/node_sdl.tmpl",
	)
}

func templateNode_sdlTmpl() (*asset, error) {
	bytes, err := templateNode_sdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_sdl.tmpl", size: 1826, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/node_sdl.tmpl": templateNode_sdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"node_sdl.tmpl": &bintree{templateNode_sdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
