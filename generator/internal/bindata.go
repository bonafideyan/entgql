// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/node_sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateNode_sdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x8c\x8d\x1c\xda\x22\x75\x81\x1c\x0d\xec\xc1\xb5\x13\xc0\xc0\xda\xee\x26\x29\xf6\xb0\x08\xd6\x8c\x38\x92\x89\xa5\x48\x2d\x49\x35\xd1\x2a\xfa\xef\x8b\xa1\x3e\x28\xab\x76\x13\x14\x3d\x85\xe6\x50\x6f\xde\xbc\x79\x1c\xa6\xaa\x3e\xc2\x85\xd2\x1c\x61\xfe\x1b\xcc\xe0\x63\x5d\x47\xcd\x16\xcb\x9a\xad\x2d\x2d\x68\x3b\xaa\xaa\x4f\x1f\xe0\x5a\x15\x99\x85\x0f\x9f\xfc\x16\xaa\x22\x83\xaa\xf2\x87\xeb\x7a\x67\x38\x9a\xcf\x25\x54\x11\xc0\x76\x71\xff\xf5\x76\xf1\x7b\x04\xb0\x5e\xfd\xbd\xb8\x5b\x36\x8b\xd5\xf5\xdd\xd2\xc3\x1b\xa6\x52\x84\x0b\x41\x19\x7c\xf6\xd9\x5a\x71\x7c\x46\x5b\xd7\x11\x10\xa2\x68\xf2\xbe\x40\x91\xe7\x68\x96\xcc\x62\x5d\xb7\x38\xe7\xa2\x3d\x38\x2a\x5e\xd7\x51\x47\xf8\xbe\xcc\xb1\x27\xec\xca\x1c\x03\x61\x10\x59\x2e\x31\x43\xe5\x2c\x6c\x49\x02\x62\x2e\xf8\x1c\xd6\xab\xc9\x90\x66\x12\x68\xde\x08\x94\xbc\x67\x99\x74\x3c\x62\x96\xa1\x14\xff\xd1\x52\xea\xa7\x86\xd2\x8d\x30\xd6\xd5\xf5\xbc\x39\x48\x34\xe0\x05\x6c\xcc\x24\x33\x5b\x9f\xbe\xaa\x44\x02\x4a\x3b\x20\x1c\x21\x25\x7b\x94\x58\xd7\x93\xaa\x6a\x0a\x08\xa5\x0c\xa8\x60\xa0\x72\xcd\x53\xaf\x97\x6f\x17\x6e\xdb\x7e\x5d\xa0\x4f\x35\x6b\x52\xf8\xa0\x48\x40\x1b\x0a\x6c\xae\x76\xf4\x67\x77\xb5\x83\xae\x02\x7c\x6b\x05\x38\xe6\x8c\xb3\x5d\xee\x84\x56\x4c\x8e\x39\x4b\x8b\x21\xe7\xee\x6a\xd3\xa4\xde\xf8\x94\xd3\xe9\xf4\x16\x19\xb7\xc0\x14\x07\x54\x54\xb2\x85\x9c\xa5\x42\x31\x02\x03\x77\x30\xba\x48\x0f\xc0\xc0\xa2\x03\x9d\xc0\x3e\xe4\xde\xcf\xa6\xd3\xe9\xdb\x69\xbf\x63\x89\x43\x33\x87\x3b\x67\x84\x4a\x2f\xe1\x11\x13\x6d\x30\xfc\x4e\xe8\xd8\x1c\xd6\xca\x5d\x82\x64\xfd\xf2\xe9\x80\x74\x2a\xa4\xfd\x93\x36\xd6\x2a\x2f\xdc\x25\xe8\xc6\xe2\x73\xf8\x2b\xc4\x5b\xdb\x4f\x1e\xde\x0f\xbf\x5a\x6a\xa5\x30\xa6\x9a\x46\x8d\xec\xdd\x39\x9d\x4e\x17\xbe\xbc\xc6\x8c\x7b\x40\x9e\x22\x08\xd2\x00\x21\xee\x3f\xf7\x45\x1f\xfb\x96\x3a\xef\xbd\xea\x21\xe2\xc2\x58\x6d\x20\xd1\x06\x0a\xeb\x01\x82\x9e\xad\x62\xcd\x91\xae\xf4\x49\xf3\xe5\xfd\x01\x8f\xd2\x33\xe7\x33\xa3\xe2\xa4\xbb\x5f\xf2\x14\x5b\x04\x72\xdc\x3c\x30\x98\xf4\x05\x04\xa2\xe0\x34\x30\x90\xc2\xf6\x7d\xeb\x90\xbf\x31\x59\xa0\x3d\x2e\x84\x1c\x3c\x56\x2a\xd4\xd4\xa1\x10\x03\x0b\x4f\x07\x11\x1f\x28\x93\x63\x42\x59\x4f\xed\x88\xb8\xe2\x9d\x08\x44\x41\xf0\x93\x1a\x78\xa8\xa6\x71\x41\xc5\xc9\x43\x2b\xc6\x5a\x25\xda\x64\xac\xaf\xe3\x0c\x48\xce\x52\xa4\xa3\x73\xf8\xd2\xae\x06\x62\xc6\xba\x50\x9e\x35\x93\xf2\x88\x60\xa9\x0b\x0a\x4a\x0e\x29\x3a\x48\x8c\xce\x4e\xf5\x18\xc0\x69\xc7\xe4\x92\x50\xbc\x17\x27\xfd\x0c\xf3\xee\x0b\x53\x4c\xd0\xcf\xd0\x8c\x60\xd0\x7e\x80\x35\x8d\xbe\x11\xd2\xa1\x79\x6d\x92\xb5\x23\xe2\x22\x99\x7d\x55\xe2\xdf\x02\x7f\xcd\x70\x1b\xe4\x1e\x7b\x1f\x60\xb1\x5d\x0d\x3b\x11\x0a\x98\x3c\x44\x00\xbb\xdb\x1f\x04\xb7\xbb\xfb\xb3\xd1\x3a\x6a\xa5\x59\xa1\x44\x87\xfd\xa1\xa0\x4d\x2c\x05\x2a\xb7\x29\x9c\x6f\xea\xba\x57\x6a\x30\xf7\xcf\x81\x7c\x61\xa5\xd4\x8c\x77\x1e\xa5\x86\xe3\x33\x8b\x1d\x58\x52\x69\x3f\x46\xde\x83\x3b\x30\x07\x4f\xcc\x42\x6e\xf4\x37\xc1\x91\x77\x77\x3b\x6b\x0f\x81\x68\x86\x4a\xa1\xe2\x03\xb5\x87\x7b\x27\x17\xaa\xb0\xc8\x67\xb0\x61\x25\x3c\x22\x5d\x69\x0e\x8f\x25\xb0\x96\x3b\xb9\xd3\x19\x16\xff\xd3\xc3\xd8\xee\x92\x9f\xaf\xad\x2d\xe2\x5c\x03\x07\x77\xda\xdb\xed\x8f\x02\x4d\xd9\xbf\xf1\xcf\x8e\x46\x82\xbf\xb8\x4d\xa0\xfa\x21\xe2\xbb\x56\xc8\xf7\x03\xe8\x9f\xb5\xa0\x7a\xd5\x80\x9f\xcb\xa1\x53\xfb\x7f\x07\x3a\x2e\xc3\xe0\xdb\xbd\xfb\x3d\xf7\xef\x2d\xfc\x53\x0f\x99\x1a\xbf\x63\xaf\x15\x08\x2f\x90\xcb\xc2\x30\x0a\xfe\x82\x17\x6d\x7c\x67\x46\x0f\x9a\x3a\xf5\x9e\xa9\xf1\x73\xd6\xb9\xa4\x73\xda\x29\xa3\xf4\x31\xf2\x0a\x3f\xbe\x48\xef\xbc\xed\xe7\x27\x2f\x29\x29\x7f\xfa\xde\x45\x75\xf4\x7f\x00\x00\x00\xff\xff\xcd\x37\x17\x21\xab\x0a\x00\x00")

func templateNode_sdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_sdlTmpl,
		"template/node_sdl.tmpl",
	)
}

func templateNode_sdlTmpl() (*asset, error) {
	bytes, err := templateNode_sdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_sdl.tmpl", size: 2731, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/node_sdl.tmpl": templateNode_sdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"node_sdl.tmpl": &bintree{templateNode_sdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
