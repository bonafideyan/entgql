// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/node_sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateNode_sdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x51\x4f\xdb\x3c\x14\x7d\xcf\xaf\xb8\x89\x78\xe0\x43\x50\xde\x23\x7d\x0f\xa5\x05\xa9\xd2\x56\x36\x28\xda\xc3\x84\x86\x69\x6e\x12\x4b\x8e\x9d\x39\xf6\xa0\x0b\xfe\xef\xd3\xb5\xd3\x24\x2d\x74\x48\x68\x6f\x8e\xaf\x7d\x7c\xce\xb9\xc7\x4e\xdb\x9e\xc1\x91\x54\x19\x42\xfa\x3f\x4c\xe0\xcc\xb9\x28\x4c\xb1\x2a\x4c\x2d\x69\x40\xd3\x51\xdb\x9e\x9f\xc0\xa5\xb4\x55\x03\x27\xe7\xce\x45\x28\x6d\x05\x6d\xeb\x97\x3a\x77\xad\x33\xd4\x17\x1b\x68\x23\x80\xe5\x74\x75\x77\x33\xfd\x14\x01\x2c\xe6\x3f\xa6\xb7\xb3\x30\x98\x5f\xde\xce\x3c\xb8\x66\xb2\x40\x38\xe2\x84\xef\xcf\x9e\x2c\x64\x86\xcf\xd8\x38\x17\x01\x21\xf2\x70\xea\x0b\xd8\xba\x46\x3d\x63\x0d\x3a\xd7\xe1\x1c\xaa\xf6\xe0\x28\x33\xe7\xa2\x2d\xdd\xd5\xa6\xc6\x8e\xae\xd9\xd4\x38\xd0\x05\x5e\xd5\x02\x2b\x94\xa6\x81\x25\xc9\x27\xde\x3c\x4b\x61\x31\x8f\xc7\x24\xf3\x81\xe4\x15\x47\x91\xf5\x1c\xf3\x2d\x8b\x35\xab\x50\xf0\xdf\x34\x14\xea\x29\x10\xba\xe2\xba\x31\xce\xa5\x61\x21\x91\x98\xdc\x1a\xcd\x65\x31\x66\xdd\x2d\x6a\x5b\x9e\x83\x54\x06\x08\x92\x0b\xc1\x1e\x05\x3a\x17\xb7\x6d\x50\xb2\xa3\x29\x49\x92\x29\x3c\xf4\x22\x1e\x00\xb3\x02\x81\x4b\x30\x25\xc2\x5a\x49\x89\x6b\xc3\x95\x9c\x24\x49\xb2\xa7\xf7\x92\x16\x92\x46\x0f\xb1\xb6\xba\x51\x1a\x72\xa5\xc1\x36\x1e\xa0\x66\x05\x97\xac\xdf\x0c\xdd\x92\x14\x02\xef\x38\xec\x5c\x95\xb8\x73\x3c\x33\xfe\x64\x94\x19\xa8\x3c\x0c\xb3\x02\x3b\x04\x32\x2d\x1d\x18\xc4\xbd\x80\x81\x28\x18\x05\x0c\x04\x6f\x0c\xed\x1f\x23\xff\x62\xc2\x62\xb3\x2b\x84\x9a\xb0\xf4\xf5\xd9\x80\xd0\x6b\xda\xa2\x10\x83\x06\x9e\x4a\xbe\x2e\xe9\x24\xc3\xb8\x6c\x3c\xb5\x1d\xe2\x32\xdb\x9a\x40\x14\x78\xf6\xa6\x07\x1e\x2a\x85\xef\x3b\x2e\xc6\xf7\x9d\x19\x0b\x99\x2b\x5d\xb1\x5e\xc7\x01\x90\x9a\x15\x48\x4b\x53\xf8\xd2\x8d\x46\x66\xae\x95\x95\x9e\x35\x13\x62\x87\xe0\x46\x59\x2a\x8a\x0c\x0a\x34\x90\x6b\x55\xbd\xd5\x63\x00\xa3\x0c\x13\x33\x42\x49\x61\x21\x4d\xdc\x27\x7f\x21\x6b\x6b\xb6\xd9\xe7\xf4\x31\xb4\xe2\x5b\x89\x1a\x17\x61\xae\x8b\x7d\x68\xf3\x15\x17\x06\xf5\x7b\xf9\xa7\x32\xcf\x29\xaf\x77\x92\xff\xb4\xf8\xcf\xaf\xc4\x88\xc6\xfe\x25\x00\x98\x2e\xe7\xe3\x96\x0c\x5a\xe2\xfb\x08\xe0\xfa\xe6\x2f\xc5\xe5\xf5\xea\x60\x75\xeb\xdb\x57\x8b\x7a\xd3\x3d\x70\xcf\x86\x92\xed\xf3\x17\xa6\xdb\x20\x54\x06\x99\xfb\xda\x8e\xbb\xf7\xe3\xbf\x51\xea\x3f\xea\xa5\x7c\xd7\xc9\x8b\xcd\xd8\xf2\x7d\x0b\x8f\xc7\xc5\x0f\x35\xe1\xb5\x8c\xd7\xbd\x48\x92\xe4\x06\x59\xd6\xf8\xfb\x84\x92\x9e\xae\x66\x74\x03\xc0\x94\x5a\xd9\xa2\x04\x06\x0d\xee\x5f\xf1\x2e\xc0\x87\xec\x84\x17\xa8\x85\xd5\x8c\xd4\x3b\x77\xcc\x72\x83\xfd\x6b\x74\x0a\x8f\x98\x2b\x8d\xc3\x77\x4e\x5b\xfc\x0d\x38\x05\xc1\xfa\xe1\x13\x75\x38\x7d\x2b\xf8\xa7\xa0\xc2\x0f\x6b\x1c\x88\xee\x1f\x16\xdf\x8f\xa5\x0f\x6f\x4d\x9f\x91\xcf\xd6\x04\x7d\x3e\x26\x7f\x02\x00\x00\xff\xff\xbf\x20\xfd\xcf\x43\x07\x00\x00")

func templateNode_sdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_sdlTmpl,
		"template/node_sdl.tmpl",
	)
}

func templateNode_sdlTmpl() (*asset, error) {
	bytes, err := templateNode_sdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_sdl.tmpl", size: 1859, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/node_sdl.tmpl": templateNode_sdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"node_sdl.tmpl": &bintree{templateNode_sdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
