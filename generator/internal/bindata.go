// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/node_sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateNode_sdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x56\xc1\x6e\xe3\x36\x10\xbd\xeb\x2b\xc6\x86\x0f\xc9\x22\xeb\x05\x72\x34\xd0\x43\xd6\x49\x00\x03\x8d\xbd\x4d\xb2\xe8\xa1\x08\x1a\x46\x1c\xd9\x44\x69\x52\x25\xa9\x24\xae\xa2\x7f\x2f\x86\x94\x44\x59\x91\x37\x69\x9b\x53\x4f\x61\x48\xfa\xcd\x7b\x8f\xc3\x27\x96\xe5\x67\x98\x28\xcd\x11\x66\x3f\xc1\x14\x3e\x57\x55\x12\xa6\xd8\x36\x4c\x2d\x69\x40\xd3\x49\x59\x7e\xf9\x04\x17\xaa\xd8\x5a\xf8\xf4\xc5\x4f\xa1\x2a\xb6\x50\x96\x7e\x73\x55\xad\x0c\x47\xf3\x75\x07\x65\x02\xb0\x3c\xbb\xfd\x7e\x7d\xf6\x73\x02\xb0\x38\xff\xfd\xec\x66\x1e\x06\xe7\x17\x37\x73\x0f\x6f\x98\x5a\x23\x4c\x04\x55\xf0\xd5\xa7\x0b\xc5\xf1\x19\x6d\x55\x25\x40\x88\x22\xd4\x7d\x81\x22\xcf\xd1\xcc\x99\xc5\xaa\xaa\x71\x0e\xad\xb6\xe0\xa8\x78\x55\x25\x0d\xe1\xdb\x5d\x8e\x2d\x61\xb7\xcb\x31\x12\x06\xb1\xcd\x25\x6e\x51\x39\x0b\x4b\xb2\x80\x98\x0b\x3e\x83\xc5\xf9\xa8\x4b\x33\x8b\x34\x2f\x05\x4a\x6e\x6b\x93\x44\x06\x4a\x3b\x98\x64\xd3\x1b\x54\x56\x38\xf1\x88\xd0\x08\xc8\x1a\x8a\x29\xdb\xa2\x14\x7f\xd1\x50\xea\xa7\xc0\xf6\x52\x18\xeb\xaa\x6a\x16\x36\x12\x43\x78\x01\x9b\x32\xc9\xcc\xd2\x33\x2b\xcb\x88\xbd\x14\x52\xb2\x07\x89\x55\x35\x2a\xcb\xa0\x2d\xaa\xdc\x1f\xd5\x7c\x31\xf2\xbd\xe0\x6b\x6c\xe8\x4e\x70\x59\x1f\xea\x04\x7d\xd1\x69\x28\xd6\x68\xd1\x86\x16\xae\x4e\x57\xf4\x67\x75\xba\x6a\xb5\xe0\x7b\xb5\x60\x9f\x3d\x4e\x57\xb9\x13\x5a\x31\xd9\x67\x2f\x2d\xc6\x9a\xab\xd3\xab\x50\xfa\xca\x97\x1c\x8f\xc7\xd7\xc8\xb8\x05\xa6\x38\xa0\x22\xf1\x16\x72\xb6\x16\x8a\x11\x18\xb8\x8d\xd1\xc5\x7a\x03\x0c\x2c\x3a\xd0\x19\xdc\xc7\xda\xf7\xd3\xf1\x78\xfc\x7e\xda\x47\x2c\x73\x68\x66\x70\xe3\x8c\x50\xeb\x13\x78\xc0\x4c\x1b\x8c\xff\x67\xb4\x6d\x06\x0b\xe5\x4e\x40\xb2\x76\xf8\xb4\x41\xda\x15\xcb\xfe\x4a\x13\x0b\x95\x17\xee\x04\x74\xb8\x07\x33\xf8\x2d\xae\xd7\x77\x63\x74\x77\xdc\xfd\xd5\x5c\x2b\x85\x29\x69\x1a\x3c\xd2\x2a\x49\xc6\xe3\xf1\x99\x97\x17\x3a\xf6\x1e\x90\xaf\x11\x04\x79\x80\x90\xb6\x3f\xf7\xa2\xf7\x9b\x9b\x4e\xde\x37\xb4\x87\x48\x0b\x63\xb5\x81\x4c\x1b\x28\xac\x07\x88\x7e\xd6\x8e\x85\x2d\x8d\xf4\x51\xf8\xe5\xed\x06\xf7\xca\x33\xe7\x2b\xa3\xe2\xe4\xbb\x1f\xf2\x35\xd6\x08\xd4\x71\xb3\xc8\x60\xd4\x0a\x88\x44\xc1\x69\x60\x20\x85\x6d\xcf\xad\x41\x7e\x64\xb2\x40\xbb\x2f\x84\x3a\xb8\xef\x54\xd4\xd4\xa0\x10\x03\x0b\x4f\x1b\x91\x6e\xa8\x92\x63\x42\x59\x4f\x6d\x8f\xb8\xe2\x8d\x09\x44\x41\xf0\x41\x0f\x3c\x54\x38\xb8\xe8\xe2\xe8\xae\x36\x63\xa1\x32\x6d\xb6\xac\xd5\x71\x00\x24\x67\x6b\xa4\xad\x33\xf8\x56\x8f\x3a\x66\xa6\xba\x50\x9e\x35\x93\x72\x8f\xe0\x4e\x17\xb4\x28\x39\xac\xd1\x41\x66\xf4\x76\xe8\x8c\x01\x9c\x76\x4c\xce\x09\xc5\xf7\xe2\xa8\x0d\x3a\xdf\x7d\x31\xea\x04\xfd\x1b\x0f\x23\x36\x68\x9b\x72\xe1\xa0\x2f\x85\x74\x68\xde\x19\x77\xe4\xe2\x24\x9b\x7e\x57\xe2\xcf\x02\xe1\xa8\x9f\x7e\xc7\x1f\x93\x7e\x1d\x4a\xfd\x2b\x01\x70\xb6\x3c\xef\x1e\x50\xd4\x35\xba\x4b\x00\x56\xd7\x3f\x58\x5c\xae\x6e\x0f\xae\x56\x49\xdf\xb1\xc6\xac\x37\x9c\xf9\xe0\xb4\x3f\x94\x97\x4d\x20\x04\x92\x73\x83\xcc\xe1\x2b\xaa\x00\xa9\x14\xa8\xdc\x55\xe1\x7c\x43\x2e\xda\x53\x0e\x34\x55\x20\x39\xc8\xac\x83\x34\x3a\x58\xe8\x1b\xdb\x49\xcd\x78\x73\x07\xa9\xa1\xf1\x99\xa5\x0e\x2c\x21\xdf\xf7\xab\xdf\x83\xdb\x30\x07\x4f\xcc\x42\x6e\xf4\xa3\xe0\xc8\x9b\xec\xda\xd6\x9b\x40\x84\xd0\x2c\x54\xba\x21\x93\xb9\xef\xb1\x42\x15\x16\xf9\x14\xae\xd8\x0e\x1e\x90\x22\x8b\xc3\xc3\x0e\x58\xad\x8f\x6e\x9f\x33\x2c\xfd\xa3\x85\xb1\x4d\x88\x1d\xd6\x3f\x90\x66\x2d\xbb\xd4\xcb\xf4\x35\xdc\x46\xd8\x16\x36\x7e\x4c\xde\xb6\xae\xe3\xda\x39\x4a\xfc\xa7\xc7\xd3\xbc\x3b\x0e\x81\xfc\x5f\xad\xe7\x5e\xe6\x7f\xb5\x1e\x1a\x9c\x76\x8e\x1e\x74\x8b\xe8\xa9\x8f\xc8\x5f\x0a\x34\xbb\xf6\xf1\xfa\xec\xe8\x33\xe6\x3f\x36\x61\xa1\xfc\x61\xbd\xa3\xfa\x84\x8e\x3b\x85\x3f\x38\x36\xd5\x9b\x21\xf2\x75\xd7\x4d\x9b\xf6\xf9\xdb\x50\xec\x2e\xbe\x3f\x7f\x5e\x4b\x7a\x1d\xbb\xff\xea\x4d\xa6\xfa\x4f\xb2\xb7\x04\xc2\x0b\xe4\xb2\x30\x8c\x16\x3f\xe0\x71\xd6\xcf\xf9\xde\xdb\x4c\x0d\x3d\xcd\x54\xff\x65\xd6\x34\x4f\xd3\xd9\x43\xfd\xd3\xae\xf9\x4b\xbe\x9f\x99\x47\x9c\x39\x36\x1b\x8c\x6c\x32\x7e\x38\x61\xdb\x86\x8e\x30\xfe\xb6\xce\x06\xb3\x85\x70\x86\xe3\x22\xa9\x92\xbf\x03\x00\x00\xff\xff\x6f\x3e\xd2\x2a\xe2\x0d\x00\x00")

func templateNode_sdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_sdlTmpl,
		"template/node_sdl.tmpl",
	)
}

func templateNode_sdlTmpl() (*asset, error) {
	bytes, err := templateNode_sdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_sdl.tmpl", size: 3554, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/node_sdl.tmpl": templateNode_sdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"node_sdl.tmpl": &bintree{templateNode_sdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
