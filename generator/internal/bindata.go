// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/node_sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateNode_sdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x8c\x84\x1c\xb2\x41\xe2\xdc\x05\xec\xc1\xb1\x13\x40\xc0\xae\xd3\x26\x0e\x7a\x28\x82\x86\xb1\x46\x12\x01\x8a\x54\xf9\xd1\xc4\x55\xf8\xdf\x0b\x92\xb2\x3e\x1c\xbb\x2d\x72\x23\x39\x9c\x37\x6f\x1e\x9f\x46\x6d\x7b\x01\x27\x5c\xe4\x08\xe9\xbf\x30\x83\x0b\x6b\xa3\x70\x44\xea\x70\xb4\x72\x0b\x77\x1c\xb5\xed\xe5\x19\x5c\x73\x53\x2b\x38\xbb\xb4\x36\x42\x6e\x6a\x68\x5b\x7f\xd5\xda\x5b\x99\xa3\xbc\xda\x42\x1b\x01\xac\xe6\xeb\x87\xbb\xf9\x7f\x11\x40\xb6\xfc\x36\xbf\x5f\x84\xc5\xf2\xfa\x7e\xe1\xc1\x25\xe1\x25\xc2\x09\x75\xf8\xbe\xf6\x2c\xe3\x39\xbe\xa2\xb2\x36\x02\x87\x48\x43\xd5\x37\x30\x4d\x83\x72\x41\x14\x5a\xdb\xe1\x1c\x8b\xf6\xe0\xc8\x73\x6b\xa3\x1d\xdd\xf5\xb6\xc1\x8e\xae\xde\x36\x38\xd0\x05\x5a\x37\x0c\x6b\xe4\x5a\xc1\xca\xb5\xef\x78\xd3\x3c\x85\x6c\x19\x8f\x49\x16\x03\xc9\x1b\x8a\x2c\xef\x39\x16\x9e\x85\xb5\x69\xd8\xb8\x42\xb3\x7b\x2d\x29\x2f\xc7\xcc\x6e\xa8\x54\xda\xda\xb6\xa5\x05\x70\xa1\xc1\xa5\x51\xc6\xc8\x33\x43\x6b\xe3\xb6\x0d\x6c\x27\xbc\x93\x24\x99\xc3\x53\x4f\xf4\x09\x30\x2f\x11\x28\x07\x5d\x21\x6c\x04\xe7\xb8\xd1\x54\xf0\x59\x92\x24\x7b\x3d\x5d\xbb\x8b\xae\x0f\x0f\xb1\x31\x52\x09\x09\x85\x90\x60\x94\x07\x68\x48\x49\x39\xe9\x93\xa1\xbb\x92\x42\xe0\x1d\x87\xcc\x75\x85\x93\xf2\x44\xfb\xca\xc8\x73\x10\x45\x58\xe6\x25\x76\x08\x4e\x98\x74\x60\x10\xf7\x0d\x0c\x44\x41\x0b\x20\xc0\xa8\xd2\x2e\x7f\x8c\xfc\x83\x30\x83\x6a\xda\x88\x13\x3a\x08\xbb\x18\x10\xfa\x9e\x76\x28\x8e\x81\x82\x97\x8a\x6e\x2a\x57\x49\x13\xca\x95\xa7\x36\x21\xce\xf3\x9d\x08\x8e\x02\xcd\x0f\x6a\xe0\xa1\x52\xf8\x3a\x51\x31\x7e\xec\xc4\xc8\x78\x21\x64\x4d\xfa\x3e\x8e\x80\x34\xa4\x44\x77\x35\x85\x4f\xdd\x6a\x24\xe6\x46\x18\xee\x59\x13\xc6\x26\x04\xb7\xc2\xb8\x20\xcb\xa1\x44\x0d\x85\x14\xf5\xa1\x37\x06\xd0\x42\x13\xb6\x70\x28\x29\x64\x5c\xc7\xbd\xbb\x33\xde\x18\xbd\xf3\x37\x75\x9b\xe1\x29\xbe\x54\x28\x31\x0b\x67\x9d\xb5\xc3\x33\xdf\x50\xa6\x51\xfe\xc9\xe3\x2e\x4c\x0b\xe7\xd7\x07\x4e\xbf\x1b\xfc\x90\xed\x47\xa5\xf6\x8d\x0e\x30\x5f\x2d\xc7\xb2\x0f\x7c\xe3\xc7\x08\xe0\xf6\xee\x37\xc1\xd5\xed\xfa\x68\x74\xa7\xcd\x67\x83\x72\xdb\x0d\xaa\x57\xed\xdc\xeb\x3d\x16\x8e\xdb\xd0\x0c\x0f\x73\x84\x89\x97\x09\xed\xd3\x6e\x0e\xfc\x33\x72\xf6\x47\xf5\x3a\x52\xe2\x6a\xdb\x6b\x79\x40\xb7\xd3\x71\x70\x3f\xf5\xaf\x94\x7f\xcf\xfd\xfd\x03\x24\x49\x72\x87\x24\x57\xfe\x43\x41\xee\x66\x92\x1a\x59\x1b\x74\x25\x85\x29\x2b\x20\xa0\x70\xff\xdb\xed\x9c\x79\xac\x41\x78\x83\x86\x19\x49\x18\xfd\x89\xd6\x9e\x92\x42\x63\x3f\x66\xce\xe1\x19\x0b\x21\x71\xd8\x17\x2e\xc5\x5b\xfb\x1c\x18\xe9\x97\x2f\xee\x59\xd3\x43\x8e\x3e\x07\x11\xfe\x36\x63\x17\x74\x3f\xa0\xf8\x71\xdc\xfa\x30\x44\x7a\x63\xfc\x6f\x74\xe8\xcf\x7b\xe3\x57\x00\x00\x00\xff\xff\xad\xe1\xb4\xc7\x00\x07\x00\x00")

func templateNode_sdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_sdlTmpl,
		"template/node_sdl.tmpl",
	)
}

func templateNode_sdlTmpl() (*asset, error) {
	bytes, err := templateNode_sdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_sdl.tmpl", size: 1792, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/node_sdl.tmpl": templateNode_sdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"node_sdl.tmpl": &bintree{templateNode_sdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
