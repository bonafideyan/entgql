// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/base_sdl.tmpl
// template/node_sdl.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateBase_sdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xd1\x6e\xdb\x46\x10\x7c\xd7\x57\xac\x05\x14\xb0\x81\x46\x6e\x82\xa2\x28\xdc\x87\xc2\xb5\xec\x82\x40\xe2\x04\xb5\x8d\x3c\x04\x41\x7d\x3a\x2e\xc9\x6b\x8e\x7b\xf2\xdd\xd2\xa9\x52\x18\xc8\x67\xb4\xbf\x97\x2f\x29\xee\x48\x5a\x94\x42\x59\x14\x25\xa0\x6a\x9e\x04\xe9\x66\x6e\x76\x76\xb8\xd8\xd0\xc3\xe1\xf0\x3a\x43\xb8\x51\xc4\xe0\xa4\xd0\xc2\x02\xcf\xa6\x08\x16\xa7\x16\x1d\x12\x3b\x20\x43\xcf\x12\x2b\x24\x2b\x43\x42\x43\x41\x4e\xa5\x84\x31\x50\x91\xa3\x55\x12\xee\x85\x2e\xd0\x8d\x86\xc3\xe1\xa0\x62\xf0\x6c\x83\xc1\x30\xfc\xab\xbf\x3b\xa5\x59\xf8\xea\x14\xa6\xc6\x5f\xa6\x08\x58\xe5\x08\xc2\x41\x8c\x4e\x5a\x35\xc1\x18\x26\x33\xe0\x0c\x21\xba\x7a\x0d\x3f\xfe\xf0\xdd\x73\x70\x2c\x28\x16\x36\x1e\xc1\x2b\x31\x03\x63\x21\x17\x33\x20\xe3\xd1\x52\x17\x31\x82\x08\x24\x9f\x0c\x61\xf3\xfe\x6b\x95\x63\x75\x59\x41\xea\x1e\xad\x13\x5a\xcf\xfc\xe7\xbb\x02\x41\xc5\x48\xac\x12\x85\xb6\xbc\x3c\x51\x54\x5e\xfd\xee\xb7\x8b\x33\xf8\xfe\xf9\x8b\x17\xef\x0f\x33\xe6\xa9\x3b\x39\x3e\x66\x63\xb4\x1b\x29\xe4\x64\x64\x6c\x7a\x9c\x71\xae\x8f\x6d\x22\xfd\xa1\xa3\x85\x8a\x6f\xa2\x71\x75\xa3\x36\x52\x78\xab\x7c\x85\x02\xa4\x21\xc2\x60\x1d\x70\x26\x18\xa4\x20\x98\x20\x14\x0e\x63\x48\x8c\x05\x8b\xae\xc8\x15\xa5\x30\x15\xa9\xa2\x00\x6c\xf2\x9e\x15\xd6\x19\x5b\x32\x13\x98\xc9\x1f\x28\x19\x3e\x2a\xce\x40\x40\xaa\xcd\xa4\x59\xd7\x6d\x34\xbe\x0d\x58\x45\x8c\x36\x11\x12\xe1\xd2\xc4\x08\x7f\x0d\x00\x82\xb2\x65\xc0\xdc\x88\x11\x9c\x35\x74\x29\x82\x7b\x61\x95\x29\x1c\x4c\xb5\x90\xe8\x80\x33\x6b\x8a\x34\x33\x05\x87\xfe\xb8\x99\x63\xcc\x81\x4d\x4d\xe1\xdb\xa6\x1c\x38\x45\xa9\xc6\x32\x10\x41\x09\x80\x8a\x4f\x20\x1a\x1f\x0c\x1e\x42\x0d\x11\x25\xc6\xe6\xa5\x3d\x62\xe2\xe9\xe6\x65\x2f\xfb\x15\x08\x42\x16\xdf\x88\x14\x3d\xb2\xae\xe4\x6d\x86\xf4\x08\xa4\xd4\xfb\xf8\x51\xd8\xd8\x7d\x0b\xc2\xa2\x17\x68\x11\x72\x63\x11\x14\x63\xee\x7e\x2e\x85\x64\xc2\x5d\xe2\x9f\xec\xb9\x4e\xe0\x17\x63\x34\x0a\x3a\x18\xb4\x13\x4e\x84\xfc\xd0\x89\xf1\x8d\xc5\x7b\xef\xd3\xa6\xac\xde\x44\x19\x5a\xeb\x4d\x94\x86\x58\xd1\xa3\x65\x8e\x85\xe5\xb2\xf1\x27\x70\xc5\x56\x51\xba\x82\x71\x5e\xf8\x93\x84\x48\xf1\x12\xdd\x43\x95\xd5\x44\x69\xc6\x00\xa9\x7b\x2f\x52\xa1\xc8\x71\x75\x10\x12\x85\x3a\x76\x23\x38\xd5\xba\xfa\x1c\x1c\x91\x26\x9f\x84\xa7\xa6\x8a\xa2\x36\xa9\x92\x42\xc3\x97\xcf\x7f\x0b\x8a\x47\x5f\x3e\xff\x53\xe6\x70\x5a\xd4\x4c\x17\xe5\x4d\x55\x07\x23\x07\x54\x68\x0d\x87\x2a\x81\x5b\xb6\x05\xde\x82\x8f\xcf\x14\xa5\x8f\x63\x7c\xe4\x1f\x75\xe5\xc2\x93\x3e\x3f\x97\x08\xed\x96\x0f\xd6\x29\x73\x97\x85\xd6\x8f\x1d\xa8\xec\x3a\xbf\x2b\x84\xf6\xc5\x85\xcc\xd6\x98\x85\x78\xa2\x3f\x72\x6d\x96\x7c\xbe\x34\x5c\xfe\xf2\x34\x98\x0c\x9f\xb7\xe2\xa3\x72\x3a\x85\x27\x69\x11\xae\x95\xe3\x5a\x33\x9d\xc0\xbb\x12\x76\xf0\xbe\x71\xb1\xea\x02\x26\xc3\x51\x0b\xfe\x25\x3a\xff\xb0\x8a\x65\x64\x53\xb5\x46\xe7\xae\x33\x41\x4b\x9a\xe7\x50\x63\xbb\x14\x5f\xd3\xbc\xb6\xed\x1e\xfc\x6a\x51\x84\x6c\x3d\xad\x26\x2d\x8f\xb5\x08\x5a\x20\xe8\xa6\xa9\x41\xb6\x4a\xd6\x99\x21\xf6\x09\x5f\x62\x71\x65\xdc\x0f\xa5\x70\xf8\xcc\x21\x39\xc5\xea\x1e\x1f\xe3\x55\xb6\xc4\x2d\x71\x8d\x0d\x96\x19\x95\x25\xe9\x46\x9c\xa1\x83\xad\xb4\x5d\x24\x2a\x5a\x29\x32\x9a\xff\xb4\x85\xde\x96\x0b\x1a\x8a\x57\xdf\x71\xe5\x87\x97\x2b\xe7\xc2\x26\x76\x84\xa1\xe7\xde\x2a\xce\x56\x89\x0e\x27\x36\x27\x26\xc3\x57\xab\xb8\x3b\x8a\x6d\xf1\x62\x2e\xb7\x83\xdd\xdd\x94\xb7\x3b\x7e\xd5\xe1\xa2\x73\x8a\x7b\x38\x8e\x14\x3f\xe9\x37\x52\xdc\xcb\xed\xf3\x76\xde\x4e\x22\x5b\x3c\xa8\x65\x76\xf0\xb9\x8b\xe2\x76\x97\xcf\xd7\x5e\xf2\x4a\xb0\xcc\x70\xf9\x99\x9c\x0a\x66\xb4\xf4\xb5\x1b\x70\x4a\x50\x50\x8c\xd6\x49\xbf\x36\x1c\xfe\x7e\x04\x79\xc5\x20\x68\x56\x2f\x4a\x32\x13\x7e\xaf\x46\xfb\x13\x08\x98\xa2\x95\xe8\xb7\x70\x95\x12\x1c\x7e\xb3\x04\xc0\xbb\x02\x49\x22\x98\x04\x3e\xa1\x35\x61\x17\xf6\xcc\x8f\x14\xae\x9e\xcb\xea\xc3\x4a\x83\x02\xe3\xfe\x97\x40\x86\x5f\x7e\x5d\x45\x97\x0e\x2c\x74\xf7\xbf\xed\x41\x87\xbc\xae\x6f\xc7\x9e\xd4\x53\x35\xa4\xad\xa4\xf5\x9b\x64\x44\xbc\x8b\x35\x32\x22\xde\xf7\x1d\x32\xf2\xff\xeb\xed\xbb\x40\xce\xc1\xdd\xb7\xc7\x88\xb8\xff\xea\xd8\x04\x6f\xb6\x37\xce\xa5\xee\x60\x69\x9c\x93\xf5\xd9\x18\x57\xa0\xb7\x59\x17\x3d\xe5\xfa\x54\x87\x17\x26\x3b\x88\xb5\xe7\xd9\xf7\x5c\x97\xaf\x73\xfa\x06\xbb\x81\xee\x9e\x6c\x0f\xea\x1f\xed\x05\xf4\x66\xd9\x6e\xa8\xdd\x41\xb8\x1b\x6c\x7d\xd2\xbd\x0a\xbe\x4d\xbc\x03\xe7\xfa\x7c\x5f\x68\x23\x76\x12\xf0\x40\xb4\xef\x09\x0f\x22\xfb\x47\xbc\x09\xef\x9e\xf1\x80\xea\x1f\xf2\x45\xf8\x66\x29\x6f\x0a\xde\x41\xcc\x9b\x74\x7d\x72\xbe\x12\xbf\x4d\xd0\x4b\xd2\x0e\x93\xfc\x26\x1a\xef\x64\x92\xdf\x44\xe3\x7d\xcf\x79\xf9\x9a\xba\xf7\x24\x9f\xa3\x37\x98\xe4\x37\xd1\x78\x8b\x49\x5e\xa2\xd7\x77\xf1\x5a\xe5\xb8\x8b\x2e\x7a\x9e\x7d\xef\x62\xf9\xe7\x8d\xbe\x5d\x6c\xa0\xbb\x77\xd1\x83\xfa\x77\x71\x01\xbd\xd9\xa4\x6a\xa8\xdd\xc1\xa0\x6a\xb0\xf5\x99\x53\xab\xe0\xdb\x8c\xa9\xc0\xb9\x3e\xdf\x55\x5a\x76\x11\xf1\x8a\x6a\xdf\x53\xbe\x88\xec\x11\xf4\x9a\x60\xbd\xb9\xa7\x34\xfb\xdf\x1a\xfb\x30\x18\xfc\x1b\x00\x00\xff\xff\x8c\xb3\x47\x40\xc4\x1d\x00\x00")

func templateBase_sdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateBase_sdlTmpl,
		"template/base_sdl.tmpl",
	)
}

func templateBase_sdlTmpl() (*asset, error) {
	bytes, err := templateBase_sdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/base_sdl.tmpl", size: 7620, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateNode_sdlTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x56\x41\x4f\x2b\x37\x17\xdd\xe7\x57\xdc\x44\x59\xc0\x13\x2f\x4f\x62\x19\xe9\x5b\xf0\x02\x48\x91\x3e\x92\x57\xe0\xa9\x8b\x0a\x15\x33\xbe\x93\x58\x75\xec\xa9\xed\x01\xd2\x61\xfe\x7b\x75\xed\xf1\x38\x19\x06\x88\x5a\x76\x5d\x61\xc6\xce\xb9\xe7\x1c\x1f\xfb\xba\xaa\xbe\xc2\x58\x69\x8e\x30\xfd\x1f\x4c\xe0\x6b\x5d\x0f\xc2\x27\xb6\x09\x9f\x16\x34\xa0\xcf\x83\xaa\xfa\xf6\x05\x2e\x54\xb9\xb1\xf0\xe5\x9b\xff\x84\xaa\xdc\x40\x55\xf9\xc5\x75\xbd\x34\x1c\xcd\xf7\x2d\x54\x03\x80\xc5\xd9\xed\xcf\xeb\xb3\xff\x0f\x00\xe6\xe7\xbf\x9f\xdd\xcc\xc2\xe0\xfc\xe2\x66\xe6\xe1\x0d\x53\x2b\x84\xb1\xa0\x0a\xbe\xfa\x64\xae\x38\x3e\xa3\xad\xeb\x01\x10\xa2\x08\x75\x5f\xa0\x2c\x0a\x34\x33\x66\xb1\xae\x1b\x9c\xb7\x66\x5b\x70\x54\xbc\xae\x07\x91\xf0\xed\xb6\xc0\x96\xb0\xdb\x16\x98\x08\x83\xd8\x14\x12\x37\xa8\x9c\x85\x05\x59\x40\xcc\x05\x9f\xc2\xfc\x7c\xb8\x4b\x33\x4f\x34\x2f\x05\x4a\x6e\x1b\x93\x44\x0e\x4a\x3b\x18\xe7\x93\x1b\x54\x56\x38\xf1\x88\x10\x05\xe4\x91\x62\xc6\x36\x28\xc5\x5f\x34\x94\xfa\x29\xb0\xbd\x14\xc6\xba\xba\x9e\x86\x85\xc4\x10\x5e\xc0\x66\x4c\x32\xb3\xf0\xcc\xaa\x2a\x61\x2f\x84\x94\xec\x41\x62\x5d\x0f\xab\x2a\x68\x4b\x2a\xf7\x47\x0d\x5f\x4c\x7c\x2f\xf8\x0a\x23\xdd\x31\x2e\x9a\x4d\x1d\xa3\x2f\x3a\x09\xc5\xa2\x16\x6d\x68\xe2\xea\x74\x49\x7f\x96\xa7\xcb\x56\x0b\x1e\xaa\x05\xbb\xec\x71\xb2\x2c\x9c\xd0\x8a\xc9\x2e\x7b\x69\x31\xd5\x5c\x9e\x5e\x85\xd2\x57\xbe\xe4\x68\x34\xba\x46\xc6\x2d\x30\xc5\x01\x15\x89\xb7\x50\xb0\x95\x50\x8c\xc0\xc0\xad\x8d\x2e\x57\x6b\x60\x60\xd1\x81\xce\xe1\x3e\xd5\xbe\x9f\x8c\x46\xa3\xc3\x69\x1f\xb1\xdc\xa1\x99\xc2\x8d\x33\x42\xad\x4e\xe0\x01\x73\x6d\x30\xfd\x9f\xd3\xb2\x29\xcc\x95\x3b\x01\xc9\xda\xe1\xd3\x1a\x69\x55\x2a\xfb\x2b\x7d\x98\xab\xa2\x74\x27\xa0\xc3\x39\x98\xc2\x6f\x69\xbe\x39\x1b\xc3\xbb\xe3\xdd\x5f\xcd\xb4\x52\x98\x91\xa6\xde\x2d\xad\x07\x83\xd1\x68\x74\xe6\xe5\x85\xc4\xde\x03\xf2\x15\x82\x20\x0f\x10\xb2\xf6\xe7\x5e\xf4\x7e\xb8\x69\xe7\x7d\xa0\x3d\x44\x56\x1a\xab\x0d\xe4\xda\x40\x69\x3d\x40\xf2\xb3\x71\x2c\x2c\x89\xd2\x87\xe1\x97\xb7\x6b\xdc\x2b\xcf\x9c\xaf\x8c\x8a\x93\xef\x7e\xc8\x57\xd8\x20\x50\xe2\xa6\x89\xc1\xb0\x15\x90\x88\x82\xd3\xc0\x40\x0a\xdb\xee\x5b\x44\x7e\x64\xb2\x44\xbb\x2f\x84\x12\xdc\x75\x2a\x69\x8a\x28\xc4\xc0\xc2\xd3\x5a\x64\x6b\xaa\xe4\x98\x50\xd6\x53\xdb\x23\xae\x78\x34\x81\x28\x08\xde\xeb\x81\x87\x0a\x1b\x97\x5c\x1c\xde\x35\x66\xcc\x55\xae\xcd\x86\xb5\x3a\xde\x00\x29\xd8\x0a\x69\xe9\x14\x7e\x34\xa3\x1d\x33\x33\x5d\x2a\xcf\x9a\x49\xb9\x47\x70\xab\x4b\x9a\x94\x1c\x56\xe8\x20\x37\x7a\xd3\xb7\xc7\x00\x4e\x3b\x26\x67\x84\xe2\xb3\xe8\x4d\xf6\x86\xcd\x0c\x32\x87\x2d\xe2\x0f\xb6\x95\x9a\xf1\x68\x17\xd5\xc6\x67\x96\x39\xb0\x74\x28\xee\x33\x29\x50\xb9\xab\xd2\x79\xe6\x73\x7e\x0f\x6e\xcd\x1c\x3c\x31\x0b\x85\xd1\x8f\x82\x23\x8f\x31\xdb\x34\x8b\x40\x84\x7c\x97\x2a\x5b\xd3\x45\xc3\xbd\xa9\xa5\x2a\x2d\xf2\x09\x5c\xb1\x2d\x3c\x20\xa5\x8b\xc3\xc3\x16\x18\x84\x0a\x64\x94\x33\x2c\xfb\xa3\x85\xb1\x31\x6f\x1d\x06\x31\x79\xfd\xc1\x6b\xd9\x65\x5e\xa6\xaf\xe1\xd6\xc2\xb6\xb0\xe9\xdc\xab\x70\xea\x7b\x6f\xa8\x9d\x64\x7a\xd3\xce\x51\xe2\x7f\xc0\x34\xee\x65\xfe\x5b\xd3\x20\xe2\xb4\xdf\xa8\x6b\xce\x9b\x86\x19\x1b\xae\xbf\x05\x53\xcb\xf5\xfa\x13\x4a\xba\x28\xdb\x6e\x1b\x14\x5c\x0a\xe9\xd0\x1c\xd8\x76\xc9\xc3\x71\x3e\xf9\xa9\xc4\x9f\x25\xc2\x51\xb7\x0b\x1f\x7f\x4e\x17\xde\xa1\xd4\xbd\x9a\x01\xce\x16\xe7\xbb\x17\x45\xd2\x35\xbc\x1b\x00\x2c\xaf\xdf\x99\x5c\x2c\x6f\xdf\x9c\xad\x07\x5d\xc7\xa2\x59\x1f\x38\xf3\xc9\xaf\x8e\xb7\xfa\x76\x6c\x4c\x81\x64\xe7\xce\x49\xfb\xfa\x4e\x4e\x0f\x0a\x5b\xb0\x23\x15\xea\x9c\xd3\x83\x0a\x89\x4e\x30\x7f\x29\xd1\x6c\xdb\xa7\xeb\xb3\xa3\x26\xe6\x2f\x81\x30\x51\xbd\xcb\xed\xa8\x41\x3b\xde\x21\xf9\xc9\x61\x55\x1f\x6e\xdd\xf7\xed\xee\x1e\xb7\x8f\xdf\x48\x71\x77\xf2\xf0\x5d\x7f\x2d\xe9\x75\xd8\xff\xd1\x8b\x4c\x75\x1f\x64\x1f\x09\x84\x17\x28\x64\x69\x18\x4d\x7e\xc2\xd3\xac\x7b\xba\x3a\x2f\x33\xd5\xf7\x30\x53\xdd\x77\x59\x0c\x4f\x4c\x58\x5f\x7e\xda\x39\x1f\xc8\xfd\x23\x71\xe4\xf3\x3b\xed\x3d\x29\xe4\x7c\x7f\xd7\x6e\xaf\xda\x57\x38\x7d\x07\x81\x70\xfa\x1b\x19\xd1\xff\x3b\x00\x00\xff\xff\x44\x30\x94\xe6\xe2\x0d\x00\x00")

func templateNode_sdlTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateNode_sdlTmpl,
		"template/node_sdl.tmpl",
	)
}

func templateNode_sdlTmpl() (*asset, error) {
	bytes, err := templateNode_sdlTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/node_sdl.tmpl", size: 3554, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/base_sdl.tmpl": templateBase_sdlTmpl,
	"template/node_sdl.tmpl": templateNode_sdlTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"base_sdl.tmpl": &bintree{templateBase_sdlTmpl, map[string]*bintree{}},
		"node_sdl.tmpl": &bintree{templateNode_sdlTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
