{{- $node := . -}}
{{- $name := .Name -}}
{{- $idType := "ID" -}}
{{- if .IDType -}}
	{{$idType := .IDType | scalarName1 }}
{{- end -}}

{{/* Enum */ -}}
{{- range $f := $node.Fields}}
{{- if isEnum $f  }}
enum {{$f.Name | camelize}} {
{{- range $fn := $f.EnumValues}}
  {{$fn -}}
{{end}}
}
input {{$f.Name | camelize}}Filter {
  isNull: Boolean
  equalTo: {{$f.Name | camelize}}
  notEqualTo: {{$f.Name | camelize}}
  in: [{{$f.Name | camelize}}!]
  notIn: [{{$f.Name | camelize}}!]
}
{{- end}} 
{{- end}}
 
{{/* Types */ -}}
type {{$name}} implements Node {
  id: ID!
{{- range $f := $node.Fields -}}
{{- if not $f.Sensitive }}
  {{ $tn := $f | scalarName -}} 
  {{ $f.Name | camelize | lowerCaseFirst}}: {{ $tn }}{{if and (not $f.Default) (not $f.Optional) (not $f.Nillable)}}!{{end}}
{{- end}}
{{- end}}
{{- range $e := $node.Edges}}
{{- $eName := $e.Type.Name}}
{{- if or $e.M2O $e.O2O }}
  {{$e.Name | camelize | lowerCaseFirst}}: {{$eName}}{{if not $e.Optional}}!{{end}}
{{- else }}
  {{$e.Name | camelize | lowerCaseFirst | pluralize}}Jump(where: {{$eName}}WhereInput, pageIndex: Int, pageLength: Int, orderBy: [{{$eName}}Order!]): {{$eName}}Page!
  {{$e.Name | camelize | lowerCaseFirst | pluralize}}Step(after: Cursor, before: Cursor, first: Int, last: Int, where: {{$eName}}WhereInput, orderBy: [{{$eName}}Order!]): {{$eName}}Connection
{{- end}}
{{- end}}
{{/* {{- if eq additionalFieldForType }} */}}
{{- template "additionalFieldForType" .}}
{{/* {{- end}} */}}
}

type {{$node.Name}}Page {
  totalCount: Int!
  current: Int!
  nodes: [{{$name}}!]!
}
 
type {{$name}}Edge {
  cursor: Cursor!
  node: {{$name}}!
}

type {{$node.Name}}Connection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [{{$name}}Edge!]!
}
 
input {{$name}}Input {
{{- range $f := $node.Fields -}}
  {{ $tn := $f | scalarName }} 
  {{ $f.Name | camelize | lowerCaseFirst}}: {{ $tn }} 
{{- end}} 
{{- range $e := $node.Edges}}
{{- $eName := $e.Type.Name}}
{{- if or $e.M2O $e.O2O }}
  {{$e.Name | camelize | lowerCaseFirst}}ID: ID 
{{- end}}
{{- if or $e.O2M $e.M2M }}
  {{$e.Name | camelize | lowerCaseFirst}}ID: [ID!] 
{{- end}}
{{- end}}
}

input Create{{$name}}Input {
  clientMutationId: String
  {{$name | lowerCaseFirst}}: {{$name}}Input!
}

input Modify{{$name}}Input {
  clientMutationId: String
  id: ID!
  {{$name | lowerCaseFirst}}: {{$name}}Input!
}

input Delete{{$name}}Input {
  clientMutationId: String
  id: {{$idType}}!
}
 
type Create{{$name}}Payload {
  clientMutationId: String
  {{$name | lowerCaseFirst}}: {{$name}}! 
}

type Modify{{$name}}Payload {
  clientMutationId: String
  {{$name | lowerCaseFirst}}: {{$name}}! 
}

type Delete{{$name}}Payload {
  clientMutationId: String
  {{$name | lowerCaseFirst}}: {{$name}}! 
  
{{- range $e := $node.Edges}}
{{- $eName := $e.Type.Name}}
{{- if $e.M2O }}
  {{$e.Name | camelize | lowerCaseFirst}}: {{$eName}}{{if not $e.Optional}}!{{end}} 
{{- end}}
{{- end}}
}

{{/* Inputes */ -}}
input {{$name}}WhereInput {
  id: {{$idType}}Filter
{{- range $f := $node.Fields}}
{{- if not $f.Sensitive }}
  {{$f.Name | camelize | lowerCaseFirst}}: {{$f | scalarName}}Filter
{{- end}}
{{- end}}
{{- range $e := $node.Edges}}
{{- $eName := $e.Type.Name}}
{{- if or $e.M2O $e.O2O }}
  has{{$e.Name | camelize}}: BooleanFilter
  of{{$e.Name | camelize}}With: {{$e.Type.Name}}WhereInput
{{- end}}
{{- if or $e.O2M $e.M2M }}
  has{{$e.Name | camelize}}: BooleanFilter
  has{{$e.Name | camelize}}With: {{$e.Type.Name}}WhereInput
{{- end}}
{{- end}}
  AND: [{{$name}}WhereInput!]
  OR: [{{$name}}WhereInput!]
  NOT: [{{$name}}WhereInput!]
}

enum {{$name}}OrderField {
{{- range $f := $node.Fields}}
  {{$f.Name | underscore | upperCase}} 
{{- end}}
}

input {{$name}}Order {
    direction: OrderDirection!
    field: {{$name}}OrderField
}

{{/* Query */ -}}
extend type Query {
  {{- /* {{$name | lowerCaseFirst}}(id: {{$idType}}!): {{$name}} */}}
{{- range $f := $node.Fields}}
{{- if and $f.Unique (not $f.Sensitive)}}
  {{$name | camelize | lowerCaseFirst}}By{{$f.Name | upperCaseFirst}}({{$f.Name | lowerCaseFirst}}: {{$f | scalarName}}!): {{$name}}
{{- end}}
{{- end}}
  {{$name | camelize | lowerCaseFirst | pluralize}}Jump(where: {{$name}}WhereInput, pageIndex: Int, pageLength: Int, orderBy: [{{$name}}Order!]): {{$name}}Page!
  {{$name | camelize | lowerCaseFirst | pluralize}}Step(after: Cursor, before: Cursor, first: Int, last: Int, where: {{$name}}WhereInput, orderBy: [{{$name}}Order!]): {{$name}}Connection
}

{{/* Mutation */ -}}
extend type Mutation { 
  create{{$name}}(input: Create{{$name}}Input!): Create{{$name}}Payload
  modify{{$name}}(input: Modify{{$name}}Input!): Modify{{$name}}Payload
  delete{{$name}}(input: Delete{{$name}}Input!): Delete{{$name}}Payload
{{- range $f := $node.Fields}}
  set{{$name}}{{$f.Name | camelize}}(id: ID!, value: {{$f | scalarName}}): {{$name}}!
{{- end}}
}

