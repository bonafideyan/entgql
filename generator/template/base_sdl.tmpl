scalar Any
scalar Cursor
scalar Map
scalar Time
scalar Upload

interface Node {
  id: ID!
}

enum OrderDirection {
  ASC
  DESC
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

input StringFilter {
  isNull: Boolean
  equalTo: String
  notEqualTo: String
  in: [String!]
  notIn: [String!]
  lessThan: String
  lessThanOrEqualTo: String
  greaterThan: String
  greaterThanOrEqualTo: String
  includes: String
  notIncludes: String
  includesInsensitive: String
  notIncludesInsensitive: String
  startsWith: String
  notStartsWith: String
  startsWithInsensitive: String
  notStartsWithInsensitive: String
  endsWith: String
  notEndsWith: String
  endsWithInsensitive: String
  notEndsWithInsensitive: String
  like: String
  notLike: String
  likeInsensitive: String
  notLikeInsensitive: String
}

input IntFilter {
  isNull: Boolean
  equalTo: Int
  notEqualTo: Int
  in: [Int!]
  notIn: [Int!]
  lessThan: Int
  lessThanOrEqualTo: Int
  greaterThan: Int
  greaterThanOrEqualTo: Int
}
 
input IDFilter {
  isNull: Boolean
  equalTo: ID
  notEqualTo: ID
  in: [ID!]
  notIn: [ID!]
  lessThan: ID
  lessThanOrEqualTo: ID
  greaterThan: ID
  greaterThanOrEqualTo: ID
}
 
input FloatFilter {
  isNull: Boolean
  equalTo: Float
  notEqualTo: Float
  in: [Float!]
  notIn: [Float!]
  lessThan: Float
  lessThanOrEqualTo: Float
  greaterThan: Float
  greaterThanOrEqualTo: Float
}
 
input TimeFilter {
  isNull: Boolean
  equalTo: Time
  notEqualTo: Time
  in: [Time!]
  notIn: [Time!]
  lessThan: Time
  lessThanOrEqualTo: Time
  greaterThan: Time
  greaterThanOrEqualTo: Time
}

input BooleanFilter {
  isNull: Boolean
  equalTo: Boolean
  notEqualTo: Boolean
}

input AnyFilter {
  isNull: Boolean
}
 
type Subscription {
  tellMe: Info!
}

type UploadedFile {
  id: String!
  fid: String!
  name: String!
  mimeType: String!
}
input UploadFile {
  id: String!
  file: Upload!
}

input LoginInput {
  username: String!
  password: String!
  isVendorUser: Boolean!
}
 
input RefreshTokenInput {
  renewOrRevoke: Boolean!
}

input ChangePasswordInput {
  newPassword: String!
  password: String!
  isVendorUser: Boolean!
}

type LoginPayload {
  me: Node!
}

type SuccessPayload {
  isSuccess: Boolean!
}

extend type Mutation {
  multipleUpload(req: [UploadFile!]!): [UploadedFile!]!
  login(input: LoginInput!): LoginPayload!
  refreshToken(input: RefreshTokenInput!): SuccessPayload!
  changePassword(input: ChangePasswordInput!): SuccessPayload!
}

extend type Query {
  node(id: ID!): Node 
}
